<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://blog2.karottc.com/</id>
  <title>杂思未济</title>
  <updated>2018-11-11T18:29:50Z</updated>
  <link rel="alternate" href="http://blog2.karottc.com/"/>
  <link rel="self" href="http://blog2.karottc.com/atom.xml"/>
  <author>
    <name>karottc</name>
    <uri>http://blog2.karottc.com</uri>
  </author>
  <entry>
    <id>tag:blog2.karottc.com,2018-11-11:/posts/2018-11-11-react-native-fmod-studio/</id>
    <title type="html">React-Native 播放 FMOD Studio 的 bank 音频</title>
    <published>2018-11-11T18:29:46Z</published>
    <updated>2018-11-11T18:29:50Z</updated>
    <link rel="alternate" href="http://blog2.karottc.com/posts/2018-11-11-react-native-fmod-studio/"/>
    <content type="html">&lt;h2 id="背景"&gt;背景&lt;/h2&gt;
&lt;p&gt;最近RN的项目中用的音频文件是fmod的.bank 格式的，关于fmod是什么，可以参考&lt;a href="https://www.fmod.com/"&gt;fmod的官网&lt;/a&gt;（https://www.fmod.com/），或者自己去网上搜索。本项目的核心诉求是，在播放音频的同时，音频会不定时的产生事件回调，通知到RN，然后RN根据事件来绘制不同的页面（展示不同的内容）。&lt;/p&gt;
&lt;p&gt;在网上根本找不到任何RN使用fmod的资料，退一步，iOS和Android 使用fmod的资料也是少之又少，都看了一遍之后，毫无帮助，没办法，只能靠自己去尝试了。&lt;/p&gt;
&lt;p&gt;从fmod官网下载了iOS、Android、H5的相关库，里面的例子全是C++的，iOS和Android的项目工程文件，根本打不开，官方指导也没有说明第一步、第二步等等分别调用什么API。fmod 以前是做PC上的游戏的，他对移动端的支持非常有限，从文档不全就能略知一二。&lt;/p&gt;
&lt;p&gt;本文就梳理一下自己摸索的流程和踩过的坑。&lt;/p&gt;
&lt;h2 id="ios"&gt;iOS&lt;/h2&gt;
&lt;p&gt;首先还是必须去官网下载&lt;a href="https://www.fmod.com/download"&gt;fmod的API文档&lt;/a&gt;（https://www.fmod.com/download），虽然看了文档也是一脸懵逼，但是聊胜于无，也必须看，因为所有的尝试还是需要依据官方文档来进行。&lt;/p&gt;
&lt;p&gt;这个要分成两部分来讲，因为iOS和Android 两个平台，要分别写两套代码，虽然核心使用fmod api的部分是一样的。&lt;/p&gt;
&lt;p&gt;对于，iOS的平台，需要提前知道的知识点： * 会react-native（废话，不会这个就不会有这一堆问题了）； * 稍微会一点点Object-c； * 会OC和C++的混编；&lt;/p&gt;
&lt;p&gt;基本思路是在RN界面点击播放按钮，然后将音频的相关URL传递给iOS的native函数，下载音频文件，调用FMOD STUDIO API 播放、暂停、停止等操作，同时给播放时注册回调函数，在回调函数中回去数据再回调给RN，然后更新界面。&lt;/p&gt;
&lt;p&gt;下面给出关键步骤的部分代码。&lt;/p&gt;
&lt;h3 id="react-native-调用ios-native-接口"&gt;React-Native 调用iOS Native 接口&lt;/h3&gt;
&lt;p&gt;在RN端是通过NativeModules 来实现的&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode js"&gt;&lt;code class="sourceCode javascript"&gt;&lt;span class="im"&gt;import&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;NativeModules&lt;span class="op"&gt;}&lt;/span&gt; &lt;span class="im"&gt;from&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;react-native&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;

&lt;span class="co"&gt;// OpenNativeModule 这个是iOS端和Android端自己定义和实现的module&lt;/span&gt;
&lt;span class="kw"&gt;var&lt;/span&gt; nativeModule &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;NativeModules&lt;/span&gt;.&lt;span class="at"&gt;OpenNativeModule&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;

...

&lt;span class="co"&gt;// 调用的时候&lt;/span&gt;
&lt;span class="va"&gt;nativeModule&lt;/span&gt;.&lt;span class="at"&gt;testNativeDownloadFile&lt;/span&gt;(params)&lt;span class="op"&gt;;&lt;/span&gt;
&lt;span class="co"&gt;// testNativeDownloadFile 是OpenNativeModule中实现的 method&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RN端的核心代码就这几行，剩下的是iOS端的实现。&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode objective-c"&gt;&lt;code class="sourceCode objectivec"&gt;&lt;span class="co"&gt;// 所有能被RN调用的方法，需要用RCT_EXPORT_METHOD声明&lt;/span&gt;
RCT_EXPORT_METHOD(testNativeDownloadFile:(NSDictionary *)dict) {
  NSArray *url_list = [dict objectForKey:&lt;span class="st"&gt;@&amp;quot;url_list&amp;quot;&lt;/span&gt;];
  NSMutableArray __block *file_list = [NSMutableArray arrayWithCapacity:url_list.count];
  NSInteger __block task_count = &lt;span class="dv"&gt;0&lt;/span&gt;;
  &lt;span class="kw"&gt;for&lt;/span&gt; (&lt;span class="dt"&gt;int&lt;/span&gt; i = &lt;span class="dv"&gt;0&lt;/span&gt;; i &amp;lt; url_list.count; ++i) {
    &lt;span class="co"&gt;// 替换url中的空格，否则ios不支持，会有错误码-1002&lt;/span&gt;
    NSString *tmpUrl = [url_list[i] stringByReplacingOccurrencesOfString:&lt;span class="st"&gt;@&amp;quot; &amp;quot;&lt;/span&gt; withString:&lt;span class="st"&gt;@&amp;quot;%20&amp;quot;&lt;/span&gt;];
    NSURL* url = [NSURL URLWithString:tmpUrl];
    NSLog(&lt;span class="st"&gt;@&amp;quot;xxx log: download url: %@&amp;quot;&lt;/span&gt;, tmpUrl);
    &lt;span class="co"&gt;// 得到session对象&lt;/span&gt;
    NSURLSession* session = [NSURLSession sharedSession];
    
    &lt;span class="co"&gt;// 创建任务&lt;/span&gt;
    
    NSURLSessionDownloadTask* downloadTask = [session downloadTaskWithURL:url completionHandler:^(NSURL *location, NSURLResponse *response, NSError *error) {
      &lt;span class="co"&gt;//NSLog(@&amp;quot;xxx log: file path: %@&amp;quot;, location.path);&lt;/span&gt;
      &lt;span class="co"&gt;// NSLog(@&amp;quot;xxx log: file name: %@&amp;quot;, response.suggestedFilename);&lt;/span&gt;
      &lt;span class="co"&gt;//NSLog(@&amp;quot;xxx log: error code: %@&amp;quot;, error);   // 如果有异常，输出错误信息&lt;/span&gt;
      &lt;span class="co"&gt;// [file_list addObject:response.suggestedFilename];&lt;/span&gt;
      
      NSString *caches = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject];
      &lt;span class="co"&gt;// response.suggestedFilename ：建议使用的文件名，一般跟服务器端的文件名一致&lt;/span&gt;
      NSString *file = [caches stringByAppendingPathComponent:response.suggestedFilename];
      
      &lt;span class="co"&gt;// 将临时文件剪切或者复制Caches文件夹&lt;/span&gt;
      NSFileManager *mgr = [NSFileManager defaultManager];
      
      &lt;span class="co"&gt;// AtPath : 剪切前的文件路径&lt;/span&gt;
      &lt;span class="co"&gt;// ToPath : 剪切后的文件路径&lt;/span&gt;
      [mgr moveItemAtPath:location.path toPath:file error:nil];
      
      NSLog(&lt;span class="st"&gt;@&amp;quot;xxx log: file path:%@&amp;quot;&lt;/span&gt;, file);
      
      [file_list addObject:file];
      NSLog(&lt;span class="st"&gt;@&amp;quot;xxx log: LINE:%d, file list: %lu&amp;quot;&lt;/span&gt;, __LINE__, file_list.count);
      --task_count;  &lt;span class="co"&gt;// 任务完成&lt;/span&gt;
      }];
    &lt;span class="co"&gt;// 开始任务&lt;/span&gt;
    ++task_count;
    [downloadTask resume];
    NSLog(&lt;span class="st"&gt;@&amp;quot;xxx log: finish&amp;quot;&lt;/span&gt;);
    
    &lt;span class="co"&gt;//break;&lt;/span&gt;
  }
  &lt;span class="kw"&gt;while&lt;/span&gt; (true) {
    &lt;span class="kw"&gt;if&lt;/span&gt; (task_count &amp;lt;= &lt;span class="dv"&gt;0&lt;/span&gt;) {
      NSLog(&lt;span class="st"&gt;@&amp;quot;xxx log: LINE:%d, file list: %lu&amp;quot;&lt;/span&gt;, __LINE__, file_list.count);
      &lt;span class="kw"&gt;for&lt;/span&gt; (&lt;span class="dt"&gt;int&lt;/span&gt; i = &lt;span class="dv"&gt;0&lt;/span&gt;; i &amp;lt; file_list.count; ++i) {
        NSLog(&lt;span class="st"&gt;@&amp;quot;xxx log: LINE:%d, file_name: %@&amp;quot;&lt;/span&gt;, __LINE__, file_list[i]);
      }
      &lt;span class="kw"&gt;break&lt;/span&gt;;
    }
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="播放fmod-studio-的-bank-音频"&gt;播放FMOD Studio 的 bank 音频&lt;/h3&gt;
&lt;p&gt;由于FMOD官方给的API都是C/C++的，所以这里需要OC和C++混编来实现音频播放，上面的调用Native接口的代码已经把所有的音频文件下载好了，剩下的就是加载相关的库来播放。&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode objective-c"&gt;&lt;code class="sourceCode objectivec"&gt;
FMOD::Studio::System* gsystem = NULL;
FMOD::Studio::EventDescription * geventDesc = NULL;
FMOD::Studio::EventInstance * gengine = NULL;

&lt;span class="dt"&gt;const&lt;/span&gt; &lt;span class="dt"&gt;int&lt;/span&gt; BANK_COUNT = (&lt;span class="dt"&gt;int&lt;/span&gt;)file_list.count;
  FMOD::Studio::Bank* banks[BANK_COUNT];
  &lt;span class="kw"&gt;if&lt;/span&gt; (gsystem == NULL) {
    NSLog(&lt;span class="st"&gt;@&amp;quot;xxx log: LINE:%d, init fmod studio system&amp;quot;&lt;/span&gt;, __LINE__);
    &lt;span class="co"&gt;//FMOD::Studio::System::create(&amp;amp;gsystem);&lt;/span&gt;
  } &lt;span class="kw"&gt;else&lt;/span&gt; {
    NSLog(&lt;span class="st"&gt;@&amp;quot;xxx log: LINE:%d, unloadAll fmod studio system&amp;quot;&lt;/span&gt;, __LINE__);
    &lt;span class="co"&gt;//gengine-&amp;gt;stop(FMOD_STUDIO_STOP_IMMEDIATE);&lt;/span&gt;
    &lt;span class="co"&gt;//gsystem-&amp;gt;unloadAll();&lt;/span&gt;
    gsystem-&amp;gt;release();
  }
  FMOD::Studio::System::create(&amp;amp;gsystem);
  gsystem-&amp;gt;initialize(&lt;span class="dv"&gt;1024&lt;/span&gt;, FMOD_STUDIO_INIT_NORMAL, FMOD_INIT_NORMAL, &lt;span class="dv"&gt;0&lt;/span&gt;);
  gsystem-&amp;gt;setCallback(studioCallback, FMOD_STUDIO_SYSTEM_CALLBACK_BANK_UNLOAD);
  &lt;span class="kw"&gt;for&lt;/span&gt; (&lt;span class="dt"&gt;int&lt;/span&gt; i = &lt;span class="dv"&gt;0&lt;/span&gt;; i &amp;lt; file_list.count; ++i) {
    gsystem-&amp;gt;loadBankFile([file_list[i] cStringUsingEncoding:NSUTF8StringEncoding], FMOD_STUDIO_LOAD_BANK_NORMAL, &amp;amp;banks[i]);
  }
  gsystem-&amp;gt;update();
  NSString *eventStr = [&lt;span class="st"&gt;@&amp;quot;event:/&amp;quot;&lt;/span&gt; stringByAppendingString: fmod_name];
  NSLog(&lt;span class="st"&gt;@&amp;quot;xxx log: LINE:%d, event_file: %@&amp;quot;&lt;/span&gt;, __LINE__, eventStr);
  gsystem-&amp;gt;getEvent([eventStr cStringUsingEncoding:NSUTF8StringEncoding], &amp;amp;geventDesc);
  &lt;span class="co"&gt;// 控制延迟的，暂时不用&lt;/span&gt;
  &lt;span class="co"&gt;//FMOD::System *lowLevelSystem;&lt;/span&gt;
  &lt;span class="co"&gt;//gsystem-&amp;gt;getLowLevelSystem(&amp;amp;lowLevelSystem);&lt;/span&gt;
  &lt;span class="co"&gt;//lowLevelSystem-&amp;gt;setDSPBufferSize(4096, 2);&lt;/span&gt;
  &lt;span class="co"&gt;//gsystem-&amp;gt;getEvent(&amp;quot;event:/xxxxx&amp;quot;, &amp;amp;geventDesc);&lt;/span&gt;
  geventDesc-&amp;gt;createInstance(&amp;amp;gengine);
  gengine-&amp;gt;start();
  gsystem-&amp;gt;update();
}


&lt;span class="co"&gt;// Callback to free memory-point allocation when it is safe to do so&lt;/span&gt;
&lt;span class="co"&gt;//&lt;/span&gt;
FMOD_RESULT F_CALLBACK studioCallback(FMOD_STUDIO_SYSTEM *system, FMOD_STUDIO_SYSTEM_CALLBACK_TYPE type, &lt;span class="dt"&gt;void&lt;/span&gt; *commanddata, &lt;span class="dt"&gt;void&lt;/span&gt; *userdata)
{
  &lt;span class="kw"&gt;if&lt;/span&gt; (type == FMOD_STUDIO_SYSTEM_CALLBACK_BANK_UNLOAD)
  {
    &lt;span class="co"&gt;// For memory-point, it is now safe to free our memory&lt;/span&gt;
    FMOD::Studio::Bank* bank = (FMOD::Studio::Bank*)commanddata;
    &lt;span class="dt"&gt;void&lt;/span&gt;* memory;
    ERRCHECK(bank-&amp;gt;getUserData(&amp;amp;memory));
    &lt;span class="kw"&gt;if&lt;/span&gt; (memory)
    {
      free(memory);
    }
  }
  &lt;span class="kw"&gt;return&lt;/span&gt; FMOD_OK;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在，已经可以正常播放FMOD的音频了，接下来我们要获取音频播放过程中的事件，这个相对就很简单了，设置一下回调就ok。&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode objective-c"&gt;&lt;code class="sourceCode objectivec"&gt;gengine-&amp;gt;setCallback(markerCallback,
                       FMOD_STUDIO_EVENT_CALLBACK_TIMELINE_MARKER
                       | FMOD_STUDIO_EVENT_CALLBACK_TIMELINE_BEAT
                       | FMOD_STUDIO_EVENT_CALLBACK_SOUND_PLAYED
                       | FMOD_STUDIO_EVENT_CALLBACK_SOUND_STOPPED);

&lt;span class="co"&gt;// marker的回调&lt;/span&gt;
FMOD_RESULT F_CALLBACK markerCallback(FMOD_STUDIO_EVENT_CALLBACK_TYPE type, FMOD_STUDIO_EVENTINSTANCE *event, &lt;span class="dt"&gt;void&lt;/span&gt; *parameters) {
  cout &amp;lt;&amp;lt; &lt;span class="st"&gt;&amp;quot;LINE:&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; __LINE__ &amp;lt;&amp;lt; &lt;span class="st"&gt;&amp;quot;,xxx log: type:&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; type &amp;lt;&amp;lt; &lt;span class="st"&gt;&amp;quot;,obj:&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; FMOD_STUDIO_EVENT_CALLBACK_TIMELINE_MARKER &amp;lt;&amp;lt; endl;
  &lt;span class="kw"&gt;if&lt;/span&gt; (type == FMOD_STUDIO_EVENT_CALLBACK_TIMELINE_MARKER) {
    FMOD_STUDIO_TIMELINE_MARKER_PROPERTIES* props = (FMOD_STUDIO_TIMELINE_MARKER_PROPERTIES*)parameters;
    &lt;span class="co"&gt;///TODO&lt;/span&gt;
  }
  ...
  &lt;span class="kw"&gt;return&lt;/span&gt; FMOD_OK;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来需要把音频的回调传递给RN侧，iOS侧通过一个事件通知来做。&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode objective-c"&gt;&lt;code class="sourceCode objectivec"&gt;&lt;span class="co"&gt;// native 主动通知 rn端&lt;/span&gt;
- (instancetype)init {
  &lt;span class="kw"&gt;self&lt;/span&gt; = [&lt;span class="kw"&gt;super&lt;/span&gt; init];
  &lt;span class="kw"&gt;if&lt;/span&gt; (&lt;span class="kw"&gt;self&lt;/span&gt;) {
    NSNotificationCenter *defaultCenter = [NSNotificationCenter defaultCenter];
    [defaultCenter removeObserver:&lt;span class="kw"&gt;self&lt;/span&gt;];
    [defaultCenter addObserver:&lt;span class="kw"&gt;self&lt;/span&gt;
                      selector:&lt;span class="kw"&gt;@selector&lt;/span&gt;(sendCustomEvent:)
                          name:&lt;span class="st"&gt;@&amp;quot;sendCustomEventNotification&amp;quot;&lt;/span&gt;
                        object:nil];
  }
  &lt;span class="kw"&gt;return&lt;/span&gt; &lt;span class="kw"&gt;self&lt;/span&gt;;
}
- (&lt;span class="dt"&gt;void&lt;/span&gt;)sendCustomEvent:(NSNotification *)notification {
  NSString *name = notification.object;
  NSLog(&lt;span class="st"&gt;@&amp;quot;LINE: %d,xxx log: notification:%@&amp;quot;&lt;/span&gt;, __LINE__,name);
  [&lt;span class="kw"&gt;self&lt;/span&gt; sendEventWithName:&lt;span class="st"&gt;@&amp;quot;customEvent&amp;quot;&lt;/span&gt; body:name];
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RN侧接收事件，然后进行相应渲染。&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;span class="at"&gt;componentDidMount&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt;
    &lt;span class="kw"&gt;let&lt;/span&gt; eventEmitter &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="at"&gt;NativeEventEmitter&lt;/span&gt;(nativeModule)&lt;span class="op"&gt;;&lt;/span&gt;
    &lt;span class="kw"&gt;this&lt;/span&gt;.&lt;span class="at"&gt;listener&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;eventEmitter&lt;/span&gt;.&lt;span class="at"&gt;addListener&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;customEvent&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="kw"&gt;this&lt;/span&gt;.&lt;span class="at"&gt;listenCallback&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;
  &lt;span class="op"&gt;}&lt;/span&gt;
  &lt;span class="at"&gt;listenCallback&lt;/span&gt;(item) &lt;span class="op"&gt;{&lt;/span&gt;
    &lt;span class="va"&gt;console&lt;/span&gt;.&lt;span class="at"&gt;log&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;native notition:&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;+&lt;/span&gt;item)&lt;span class="op"&gt;;&lt;/span&gt;
  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上，就是在iOS上播放fmod studio 的 bank 音频的整个流程。&lt;/p&gt;
&lt;h2 id="android"&gt;Android&lt;/h2&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog2.karottc.com,2018-06-12:/posts/2018-07-01-5th-anniversary-of-graduation/</id>
    <title type="html">毕业5周年记</title>
    <published>2018-06-12T12:26:17Z</published>
    <updated>2018-06-18T03:03:17Z</updated>
    <link rel="alternate" href="http://blog2.karottc.com/posts/2018-07-01-5th-anniversary-of-graduation/"/>
    <content type="html">&lt;h2 id="序"&gt;序&lt;/h2&gt;
&lt;p&gt;从2013年6月底离校至今，已经毕业5年了，这几年的经历，对我而言，现在并不知道意味着什么。一直以为自己还是刚毕业的样子，然而看到组内已经有95后的小鲜肉入职时，猛然发现时间已悄悄过去多年。和基友聚餐喝酒聊天时，酒量的下降也提示着我已不是少年。&lt;/p&gt;
&lt;p&gt;年岁渐长，焦虑日增，对自己的人生愈加需要思考明白。&lt;/p&gt;
&lt;h2 id="毕业之前"&gt;毕业之前&lt;/h2&gt;
&lt;h3 id="两次实习"&gt;两次实习&lt;/h3&gt;
&lt;p&gt;一次是在北京，做自动化运维平台的开发，那个平台叫 &lt;strong&gt;诺亚&lt;/strong&gt;，入职后的新手任务，就是在服务器搭建 &lt;em&gt;LAMP&lt;/em&gt; 的开发环境。后面写了两个多月的PHP，以前肤浅的认为写PHP没有多少技术，要去做底层才有技术，恨不得觉得去做芯片才最牛。所以后面就换了一个工作。&lt;/p&gt;
&lt;p&gt;一次是在深圳，做路由器相关的开发，这也是我毕业后去的公司了，刚开始确实满足了我对于做底层技术的期望。&lt;/p&gt;
&lt;h3 id="毕业答辩"&gt;毕业答辩&lt;/h3&gt;
&lt;p&gt;实习之后回到学校处理剩下的事物：毕业答辩和拍照。穿着学士服在学校的很多地方，拍了一些照片。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_05_school.jpg" alt="毕业答辩和拍照" /&gt;&lt;figcaption&gt;毕业答辩和拍照&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="毕业旅行"&gt;毕业旅行&lt;/h3&gt;
&lt;p&gt;搞定毕业答辩之后，就可以安心的出去玩了，毕竟马上离校就要各奔东西，似乎毕业前的旅行是一个必不可少的环节。我们的路线是从成都出发去九寨沟、黄龙及路过地区转了一圈，然后回到成都。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_06_travel.png" alt="毕业旅行" /&gt;&lt;figcaption&gt;毕业旅行&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;后面就是收拾行囊，迎接新的生活。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_07_airplane.jpg" /&gt;
&lt;/figure&gt;
&lt;h2 id="第一年"&gt;第一年&lt;/h2&gt;
&lt;p&gt;2013.07 - 2014.06，动荡、迷茫&lt;/p&gt;
&lt;h3 id="搬家"&gt;搬家&lt;/h3&gt;
&lt;p&gt;这一年搬了三次家，第一次毕业刚来，临时住的公司提供的酒店，花了一周找到房子，搬了出去，距离公司大概20分钟的样子。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_08_home.jpg" alt="第一次·刚来深圳" /&gt;&lt;figcaption&gt;第一次·刚来深圳&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;过了两个月，大学同班同学陆续来了深圳，为了合租到一起，我又换了一个房子，又搬了一次家。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_09_home.png" alt="第二次·大学同学合租" /&gt;&lt;figcaption&gt;第二次·大学同学合租&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;这一次住的久了一些，差不多快到一年。2014年初过完春节回到深圳，有个合租的同学，为了梦想，离开深圳，至此，我们的合租生涯差不多结束了，后面我把房子转租出去之后，自己也搬走了，这个时间段内，公司的同事刚好买了一个房，我就先搬过去住了一段时间。目前看，是住过最好的房子了。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_10_home.png" alt="第三次·同事的家" /&gt;&lt;figcaption&gt;第三次·同事的家&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="工作"&gt;工作&lt;/h3&gt;
&lt;p&gt;工作内容慢慢熟悉之后，发现并不如我想的那样。主要的工作内容是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sanity测试，主要是全面测试出厂系统的稳定性和功能点；&lt;/li&gt;
&lt;li&gt;解一些产品Bug，对，只有解bug，没有新的东西开发，Modem、路由器都是很稳定的存在，不需要开发新的东西。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_11_work.jpg" alt="工作环境" /&gt;&lt;figcaption&gt;工作环境&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;这个公司的好处就是每天晚上可以和夕阳一起下班（大概6点左右下班），在后面两份工作中都没有碰到了。夕阳行业、钱也不多、也不一定能做长久，所以几个月后便在考虑转行的事，还是决定应该去互联网，无论是做技术开发、研究员、网络安全等等，至少应该是在互联网这个行业，因为钱在这里，更多的优秀的人在这里。&lt;/p&gt;
&lt;p&gt;尝试过去做网络安全相关的，也尝试过去做一个数据科学家，但最后都失败了。后面想了想没转成功的原因，应该是自己当时并不能接受比当前低很多起点来重新开始。要转型，差不多就是重新开始，那就要从比现在拥有的一切低很多的地方重新开始，当时自己并没有勇气放弃现有的，一直想着能既不掉段，又能跨过去的路径，可惜，没成功。&lt;/p&gt;
&lt;h3 id="生活"&gt;生活&lt;/h3&gt;
&lt;p&gt;这一年，工作轻松无聊，外企和行业性质的原因，不加班，所以业余时间多了非常多，生活就相对丰富了一些。&lt;/p&gt;
&lt;h4 id="人生无常"&gt;人生无常&lt;/h4&gt;
&lt;p&gt;当然，这期间发生了令人痛心的事，我所在那个组的组长，没有任何征兆的情况下，得脑癌去世了，后面公司的募捐，由于之前老大对我很好，所以我当时捐了我三分之二的月薪，能做的不多，这便是唯一可以做的了。只有在身体很不错的情况下，才能去谈钱多钱少，否则一切都没有意义，这也是我后面平衡工作和生活的一个因素。&lt;/p&gt;
&lt;h4 id="书法"&gt;书法&lt;/h4&gt;
&lt;p&gt;刚和大学同学合租没多久，我们就一起买了笔墨纸砚一套书法装备，准备好好练一下书法。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_12_word.jpg" alt="书法" /&gt;&lt;figcaption&gt;书法&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;然而，没多久就放弃了。&lt;/p&gt;
&lt;h4 id="吉他"&gt;吉他&lt;/h4&gt;
&lt;p&gt;刚来深圳的半年，由于没有女朋友，下班时间又很早，几乎天天下班之后，带着吉他混入了深大的吉他社团，一起学习吉他，对于五音不全的我来说，是非常艰难的任务，练节拍和基本单音指法，都练了3个月多。后面才能弹一下《生日快乐》、《滴答》这类简单的歌，扫弦类的复杂技巧，我至今也没学会，当然后面换工作之后，练习的也少了，生疏了很多。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_13_guitar.jpg" alt="学习吉他" /&gt;&lt;figcaption&gt;学习吉他&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="兵乓球"&gt;兵乓球&lt;/h4&gt;
&lt;p&gt;本来在学校也时常打一打乒乓球，还以为自己也能打一打的，结果来了公司才知道，以前自己那个不叫能打一打，那叫基本不会。&lt;/p&gt;
&lt;p&gt;所以，认了公司内一个专业的乒乓球选手作为师傅，从零开始叫我打乒乓球，传我各种技巧：手法、身法、步法等等，也给我讲乒乓球的各种趣闻轶事。也是来了才知道，原来乒乓球拍都是自己买木板、买胶皮，自己贴，才是好的球拍，球拍里面的木板、胶皮、胶水的分级和学问也是多了去了。所以这一年在乒乓球上有非常大的提升。&lt;/p&gt;
&lt;p&gt;后面公司也每年有乒乓球比赛，还专门有个会议室做乒乓球场地。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_14_pingpang.jpg" alt="乒乓球场地" /&gt;&lt;figcaption&gt;乒乓球场地&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="电子产品"&gt;电子产品&lt;/h4&gt;
&lt;p&gt;工作之后，终于自己挣钱了，也终于有钱买传说中的苹果设备。今年买了两个苹果设备，一个是iPod，一个是iPad。感觉确实非常不错，所以后面几年，依次买了MacBook，iPhone。&lt;/p&gt;
&lt;p&gt;苹果的生态，一整套设备的体验，体验很不错。不过现在我已经不用iPhone了，转投了Android阵营了，因为我觉得现在的Android7.0之后，比iPhone更好。&lt;/p&gt;
&lt;h4 id="一个人的旅行"&gt;一个人的旅行&lt;/h4&gt;
&lt;p&gt;那年还很流行一场说走就走的旅行，然后2013年的十一，我便这样做了，早上还在想去哪里走走，不能一个国庆节都呆在家里，下午就买了一张票出门了，路线是：深圳-&amp;gt;佛山-&amp;gt;广州-&amp;gt;深圳。酒店什么的全都没有定，都是到了目的地，晚上一家一家去问的，因为很多家都客满了，所以每次都要问好几家才能住进去。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_15_travel.jpg" alt="说走就走的旅行" /&gt;&lt;figcaption&gt;说走就走的旅行&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="第二年"&gt;第二年&lt;/h2&gt;
&lt;p&gt;2014.07 - 2015.06，背水一战&lt;/p&gt;
&lt;h3 id="裸辞"&gt;裸辞&lt;/h3&gt;
&lt;p&gt;想去互联网行业的想法日渐坚定，于是开始投简历，鉴于之前转型失败的经验，这次准备换一个平滑的过渡，去做后台开发。经历了一些面试，比如：&lt;a href="http://mood.karottc.com/2014/11/06/1-meila-interview"&gt;美啦网&lt;/a&gt;，&lt;a href="http://mood.karottc.com/2014/10/23/ctrips-interviews-shanghai"&gt;携程&lt;/a&gt;，&lt;a href="http://mood.karottc.com/2014/09/18/1-summary-interview"&gt;腾讯1&lt;/a&gt;，&lt;a href="http://mood.karottc.com/2014/10/28/tencent-background-development"&gt;腾讯2&lt;/a&gt;，&lt;a href="http://mood.karottc.com/2014/10/29/fenqile-interviews"&gt;分期乐&lt;/a&gt; 等等，全都失败了，已经马上快毕业一年半了，这样下去，后面再转走会越来越难，所以心一横，先辞职，再找工作，不给自己留退路，辞职之后也才有更多时间复习和面试。&lt;/p&gt;
&lt;p&gt;裸辞挺考验心态的，在家复习的每一天，心态都在变化，每一次面试，每复习完成一个知识点，心态都在变化，那时还特地记录离职后的心态变化：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_16_fire.png" alt="离职后的心态变化日记" /&gt;&lt;figcaption&gt;离职后的心态变化日记&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;当然，随着时间越久，复习的越多，越来越有信心了，最终还是熬过去，取得了胜利，在2015年一月找到了一个新工作，然后忙完之后写了一个&lt;a href="http://mood.karottc.com/2015/02/01/all-interview-summary"&gt;总结&lt;/a&gt;。找到工作之后，也从同事的家里搬了出来，开始了自己的独居生活，到目前算是正式进入了互联网的大门，只是需要从头开始打怪升级了。&lt;/p&gt;
&lt;p&gt;这半年之内，算是得到了快速的成长，毕竟我的互联网知识一片空白，关于产品、技术架构等相关的思考开始萌芽。只是没有想到的是半年之后部门就面临危机，我又开始找工作了，这次我只有半年的经验，其实约等于没有，因为面试的时候面试官也基本认为你是没有经验的。这次的再找工作并没有什么慌张，只是抱着随便面面的心态，大概有这几点原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;部门面临危机，最多是产品被砍（一时半会儿也还砍不掉），不会裁员；&lt;/li&gt;
&lt;li&gt;半年前有比较充足的复习，相关的知识点还都记得，感觉面试难度应该不大；&lt;/li&gt;
&lt;li&gt;手上有一个完整的作品，从App的开发，到后台服务器的架设，全是自己一个人弄的，所以有些底气。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后面也证明，这次换工作确实比较轻松一点，自己做的那个玩具似的系统和App在后面的面试中也派上了用场，在和 &lt;strong&gt;GM&lt;/strong&gt; 的面试中，演示后获得了认可。回想起来，第一次换工作变成了一个跳板，帮我把薪资和公司的级别都做了一个大的提升。这两次的连跳，完成了一个职业生涯的完美转身，去了一个更大的舞台，展示自己、提升自己，现在依然还在这个公司。&lt;/p&gt;
&lt;h3 id="锻炼"&gt;锻炼&lt;/h3&gt;
&lt;p&gt;2015年1月换工作之后，虽然是去了一互联网公司，但是下班时间变到了8点，也还不算晚，所以鉴于自己的身体状况，制定了一个运动计划，隔天锻炼1-2小时，一直坚持N个月，直到下次换工作。就在自己一个住的房子锻炼，锻炼腹肌、胸肌、韧带，每个周末去体育馆跑步。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_17_sports.jpg" alt="锻炼的房子" /&gt;&lt;figcaption&gt;锻炼的房子&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;这几个月的锻炼，非常有效果，就是坚持很重要。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_19_me.jpg" alt="一张自拍" /&gt;&lt;figcaption&gt;一张自拍&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;在接下来的一年时间的挥霍中，全靠这锻炼出来的身体了。&lt;/p&gt;
&lt;h3 id="移动开发"&gt;移动开发&lt;/h3&gt;
&lt;p&gt;这一年也学习了iOS开发，在锻炼的间隙，因为我是隔天锻炼，所以不锻炼的时候就在学习iOS开发，用苹果新推出的 &lt;strong&gt;Swift&lt;/strong&gt; 语言，当时做了两个练手的项目，一个是&lt;a href="http://blog2.karottc.com/posts/2015-07-25-swift-2048/"&gt;游戏&lt;/a&gt;，做这个是为了熟悉语法，熟悉iOS的开发过程，和各种控件的使用。&lt;/p&gt;
&lt;p&gt;在这个游戏做完之后，开始做了另一个大一点也完整的项目——&lt;a href="http://blog2.karottc.com/posts/2015-07-26-zhihu-sarcasm/"&gt;抓取知乎吐槽的内容并展示&lt;/a&gt;，这个项目有三个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;App端，展示数据；&lt;/li&gt;
&lt;li&gt;服务器端，给App提供数据；&lt;/li&gt;
&lt;li&gt;抓取平台，抓取知乎的数据放入服务器中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;做这个是为了完整体验和了解互联网的模式和验证一些当时自己的思考。只是误打误撞，这个项目在后面的找工作过程中也有助益。&lt;/p&gt;
&lt;h3 id="头文字d完结"&gt;《头文字D》完结&lt;/h3&gt;
&lt;p&gt;《头文字D》是我喜欢的为数不多的动漫之一，在当年上初中一年级的时候接触到了，就在一直追这个动画片，一接触就喜欢上了，可能就是喜欢里面拓海那呆呆的样子吧，能够在主角身上找到一些自己的影子，可惜的是，我只有呆，却没有他那样的天赋和实力，虽然随着年岁的渐大，自卑感在减少，但是偶尔的一次自卑却来的更加沉重……&lt;/p&gt;
&lt;p&gt;所以《头文字D》寄托的是我从里面看到只有专注和继续的努力，就能变得很强，强大的可以超越自卑。不过从第一部的中拓海的呆，到最后一部中的决赛，拓海一直在成长，从呆变成了一个可以冷静分析、制定策略去取胜的高手（在比赛中为了获胜，不惜赌上荣誉，用自己也不爽的方式去赢得比赛）。而我好像一直在拒绝接受成人世界的规则，为了不变成自己曾经讨厌的那类人，一直在拒绝长大和改变。这是我这么多年以来一直的纠结……&lt;/p&gt;
&lt;p&gt;不过这个动画的完结，也算是了却了一桩心愿。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_20_initial_d.jpg" alt="头文字D·完结" /&gt;&lt;figcaption&gt;头文字D·完结&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="duet游戏通关"&gt;【DUET】游戏通关&lt;/h3&gt;
&lt;p&gt;《DUET》这个一玩就喜欢的游戏，持续玩了半年，终于通关了。详情请看&lt;a href="http://mood.karottc.com/2014/08/23/duet"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="第三年"&gt;第三年&lt;/h2&gt;
&lt;p&gt;2015.07 - 2016.06，渐入佳境&lt;/p&gt;
&lt;p&gt;第二次换工作，稳定了下来，公司的业务也在上升期。自我提升和工作提升，只要按照既定计划，一次执行即可。恰好这个时间点有两个大学同学到了深圳工作，于是生活翻开了新的篇章，一起开始了比较浪的生活。&lt;/p&gt;
&lt;h3 id="活动"&gt;活动&lt;/h3&gt;
&lt;p&gt;在接下来的一年多时间里，我们总是三五个人，一起走了不少地方，喝酒、徒步、骑行、自驾游。&lt;/p&gt;
&lt;h4 id="两次骑行"&gt;两次骑行&lt;/h4&gt;
&lt;p&gt;2015年9月来了一场骑行，从深圳坂田骑到西涌，单程大概有100公里，骑了8小时，没有前几个月锻炼出来的身体，根本扛不住，第一天喝了一罐红牛，第二天喝了两罐红牛，才最终稳妥的骑回了坂田。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_21_bike.JPG" alt="西涌骑行" /&gt;&lt;figcaption&gt;西涌骑行&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;第二次骑行是2016年6月，算是纪念毕业三周年，半夜开始从深圳坂田骑行到深圳湾看日出，然后第二天再骑回去，单程大概30公里的样子。有了上一次的骑行经历，这次距离就是小case了。&lt;/p&gt;
&lt;p&gt;回到坂田之后吃了午饭，大醉了一场，可能是因为熬夜没有吃东西，然后喝了这些酒就更容易醉吧。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_22_bike.jpg" alt="深圳湾骑行" /&gt;&lt;figcaption&gt;深圳湾骑行&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="深圳百公里"&gt;深圳百公里&lt;/h4&gt;
&lt;p&gt;2016年年初，参加深圳磨房举办的百公里活动，这个活动是每年都举办，大概是从深圳湾出发，一直走到大鹏，差不多100公里，每隔一段距离有补给点和签到点。当时我们一起报名了，想挑战一下自己，结果，活动当天下大雨，我们走了10公里，然后就去吃烤鱼回家了，成了一个遗憾。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_23_100km.JPG" alt="2016深圳百公里" /&gt;&lt;figcaption&gt;2016深圳百公里&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="深圳徒步"&gt;深圳徒步&lt;/h4&gt;
&lt;p&gt;当时给自己定了一个队名——组队刷地图，为了这个目标，为了不让周末闲在家里，所以时常出去走了不少地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;欢乐海岸，走了好几遍；&lt;/li&gt;
&lt;li&gt;深圳湾，走了好几遍；&lt;/li&gt;
&lt;li&gt;蛇口，水湾、赤湾，看航母，看艺术展；&lt;/li&gt;
&lt;li&gt;梧桐绿道（当时号称深圳最美绿道）；&lt;/li&gt;
&lt;li&gt;爬过南山，喝过小酒；&lt;/li&gt;
&lt;li&gt;逛过深大，路过世界之窗；&lt;/li&gt;
&lt;li&gt;走过罗湖老街；&lt;/li&gt;
&lt;li&gt;春节回来上班第一天就用红包赌酒；&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_24_play.jpg" alt="深圳游玩" /&gt;&lt;figcaption&gt;深圳游玩&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="自驾去惠州"&gt;自驾去惠州&lt;/h4&gt;
&lt;p&gt;说来也是搞笑，租了一辆车，开去惠州，结果在惠州打了一晚上麻将，天气也不好，一路上在下雨，只是冒雨在路过的海滩玩了两个小时。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_25_huizhou.jpg" alt="惠州游" /&gt;&lt;figcaption&gt;惠州游&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="香港徒步"&gt;香港徒步&lt;/h4&gt;
&lt;p&gt;这期间去了香港两次，逛了一些有名的地点。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_26_hk.jpg" alt="香港" /&gt;&lt;figcaption&gt;香港&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="澳门"&gt;澳门&lt;/h4&gt;
&lt;p&gt;有一个同学即将离开深圳，回老家西安去了，这次的澳门之行就算是分别之前的最后一站了，澳门可玩的确实不多，地方也很小，一天足够把该去的都去一遍了，也是是标准的大众旅游方式。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_27_aomen.jpg" alt="澳门之行" /&gt;&lt;figcaption&gt;澳门之行&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="饯别酒"&gt;饯别酒&lt;/h4&gt;
&lt;p&gt;一年前一起决定开始浪的时候，并没有想到分别的这一天来的这么快。天下没有不散的宴席，各自都有自己的选择和梦想。一起浪过，经历过，以后还能偶尔一起把酒话当年，足矣。这次饯别，把平时没有一起浪的广州、深圳两地的小伙伴也都叫了过来。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_28_leave.JPG" alt="酒" /&gt;&lt;figcaption&gt;酒&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;踏花归去，行囊已旧，未来风雨绸缪。&lt;/p&gt;
&lt;p&gt;一杯别酒，满城秋意，此书将为谁收？&lt;/p&gt;
&lt;p&gt;青春着锦，踌躇满志，肆笑妄言天下陋。&lt;/p&gt;
&lt;p&gt;纵知前途千万险，轻别离，热血万户侯。&lt;/p&gt;
&lt;p&gt;想多少年后，沉浮世久，夜思少年愁，将叹有月如钩。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="公司相关"&gt;公司相关&lt;/h3&gt;
&lt;p&gt;新的公司，新的开始，新的起点，新的技术，一切都是新的。对我而言，差不多是从0开始，以前的经验、框架，毫无用处，充满好奇的旅途就这样开始了。&lt;/p&gt;
&lt;h4 id="公司长跑"&gt;公司长跑&lt;/h4&gt;
&lt;p&gt;刚进公司就碰上公司的司庆活动，11.11 公里的跑步，新奇，所以果断报名参加了，顺便检验一下自己前半年的锻炼效果，最后拿了一个小礼物。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_29_run.JPG" alt="11.11公里跑步" /&gt;&lt;figcaption&gt;11.11公里跑步&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="百赞达人"&gt;百赞达人&lt;/h4&gt;
&lt;p&gt;进入新公司两个月，便拿到了一个新成就——百赞达人，这是一个内部的类似知乎的平台，算是一个自娱自乐的小成就，因为没有机会去显摆。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_30_100like.PNG" alt="百赞达人" /&gt;&lt;figcaption&gt;百赞达人&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="入会仪式"&gt;入会仪式&lt;/h4&gt;
&lt;p&gt;新部门有个所谓的入会仪式，就是每个新入职的员工，需要在第一次聚餐的时候，一口气喝掉一瓶啤酒。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_31_bar.JPG" alt="入会仪式" /&gt;&lt;figcaption&gt;入会仪式&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;虽然我第二天一早还要去乘飞机回家，但一瓶啤酒还算可以接受，并没有耽误第二天的行程，也就不care了。&lt;/p&gt;
&lt;h4 id="项目"&gt;项目&lt;/h4&gt;
&lt;p&gt;这期间，除了基本已有的各个场景的业务之外，算是做了两个独立的新项目。&lt;/p&gt;
&lt;p&gt;一个是抓取AppStore 、App annie、最美应用等等app排行和推荐的优秀应用，并以此计算出正在流行或者将要流行的App。&lt;/p&gt;
&lt;p&gt;一个是抓取微博、知乎等社交app的数据，用来挖掘当下流行的热点新闻时事、娱乐八卦等等内容。&lt;/p&gt;
&lt;h4 id="其他"&gt;其他&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;进入现在的部门，刚好刚上部门开行业第一的庆功宴；&lt;/li&gt;
&lt;li&gt;一年时间，基本各个场景都做过了，都熟悉了；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="遇见爱情"&gt;遇见爱情&lt;/h3&gt;
&lt;p&gt;这是这一年的另一个主题，遇见了现在的媳妇儿。所以2016年的五一、十一都回成都过节了。差不多也把成都能玩的、能逛的都走了一遍了。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_32_girl.jpg" alt="我的女孩" /&gt;&lt;figcaption&gt;我的女孩&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="第四年"&gt;第四年&lt;/h2&gt;
&lt;p&gt;2016.07 - 2017.06，沉迷游戏&lt;/p&gt;
&lt;h3 id="王者荣耀"&gt;王者荣耀&lt;/h3&gt;
&lt;p&gt;这一年沉迷王者荣耀这个游戏，不知道是什么原因开始玩的，但玩了之后所有心思都在上面了。从来没有玩过游戏的我，这次却沉迷了。关于玩游戏这段经历，已有过&lt;a href="http://blog2.karottc.com/posts/2017-08-25-play-king-of-glory-9-months/"&gt;反思&lt;/a&gt;，我在这个游戏里面到达的最高段位也就是一个钻石V。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2017/20170825_game_01.JPG" alt="最高段位" /&gt;&lt;figcaption&gt;最高段位&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;这两周公司又开始举办一年一度的王者荣耀比赛，我作为替补队员参加了。所以这两周，我又玩了一下，发现由于自己长时间没有玩，水平已经完全不行了，以前可以虐菜的段位，现在基本打不赢了。&lt;/p&gt;
&lt;p&gt;现在回过头来看，王者荣耀还是有一些进步意义的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;证明我的学习能力还不错，从小到大完全没有玩过游戏的人，能在在短时间内通过练习达到较高水平，我对自己还是很满意。这其中的学习方法，也适用学习别的东西：
&lt;ol type="1"&gt;
&lt;li&gt;看说明，先看游戏规则说明，英雄技能说明，确保理解了；&lt;/li&gt;
&lt;li&gt;练习，把自己的理解带入游戏中进行验证，就是实际对战；&lt;/li&gt;
&lt;li&gt;回顾，我每次输了比赛都会保存回放，然后研究输在哪个点上，如果对方有玩和我一样的英雄，更加会研究对方的打法套路、出装；&lt;/li&gt;
&lt;li&gt;看高手的视频，我会看一下厉害的主播的直播，他们的打发思路和出装；看一些专业队员的英雄教学；&lt;/li&gt;
&lt;li&gt;验证，把上面两步学到东西，重新带入游戏中进行验证练习；&lt;/li&gt;
&lt;li&gt;适用变化，每个赛季都会有对英雄和技能、装备的调整，再用上面的循环来调整打发套路，持续学习改进。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;即时反馈，让人上瘾的东西都是能够给人即时反馈的。同理，编程的快感也来源于写了代码马上就能看到结果，可以不停的试错和调整，也可以马上看到效果。如果学习中可以找到这样的方式，应该可以极大的提高学习兴趣。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="工作-1"&gt;工作&lt;/h3&gt;
&lt;h4 id="公司旅游台湾"&gt;公司旅游·台湾&lt;/h4&gt;
&lt;p&gt;去年我们部门拿了公司最高的奖，所以今年个人的年度旅游经费有6k/人，我选择了去台湾一圈，这次5天的行程挺满意的，台湾也是一个可以值得再去的地方。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_33_tw.png" alt="台湾" /&gt;&lt;figcaption&gt;台湾&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="公司18周年庆"&gt;公司18周年庆&lt;/h4&gt;
&lt;p&gt;公司1998年成立至今刚好18周年，18年刚好也是一个成人礼的时间。所以这次庆典搞的比较隆重一些，这次司庆的意外之喜是共给每位在职员工发了300股的公司股票，然后在第二年（2017年）公司的股价翻了一倍。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_34_tx18.JPG" alt="18周年" /&gt;&lt;figcaption&gt;18周年&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="爬取系统"&gt;爬取系统&lt;/h4&gt;
&lt;p&gt;2016年下半年老大和我定了一个KPI——做一个完善的爬取系统，但是却没有给资源（比如机器），也没有给时间，不能占用工作时间，因为正常的需求排期不能受影响。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_35_crawler.png" alt="爬取系统" /&gt;&lt;figcaption&gt;爬取系统&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;这是我当时设计的爬取系统，很遗憾，我一个人并没有完成这个任务。如果换到现在，应该就可以搞定了吧，哎……&lt;/p&gt;
&lt;h4 id="其他-1"&gt;其他&lt;/h4&gt;
&lt;p&gt;2016年的其他杂碎工作，大概如下：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_36_work.JPG" alt="2016工作" /&gt;&lt;figcaption&gt;2016工作&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="香港徒步-1"&gt;香港徒步&lt;/h4&gt;
&lt;p&gt;老大很喜欢徒步，所以我们组织了一场去香港麦理浩径的徒步。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_37_hk.jpg" alt="麦理浩径徒步" /&gt;&lt;figcaption&gt;麦理浩径徒步&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="生活-1"&gt;生活&lt;/h3&gt;
&lt;h4 id="搬家-1"&gt;搬家&lt;/h4&gt;
&lt;p&gt;由于春节之后媳妇也来了深圳，所以我从以前的贫民窟搬了出来，换到了一个公寓。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_38_newhome.JPG" alt="新公寓" /&gt;&lt;figcaption&gt;新公寓&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="逛吃"&gt;逛·吃&lt;/h4&gt;
&lt;p&gt;剩下的日子就是逛了逛、吃了吃：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;深圳逛了逛：
&lt;ul&gt;
&lt;li&gt;红树林&lt;/li&gt;
&lt;li&gt;海上世界&lt;/li&gt;
&lt;li&gt;人才公园&lt;/li&gt;
&lt;li&gt;海岸城&lt;/li&gt;
&lt;li&gt;壹方城&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;香港逛了逛；&lt;/li&gt;
&lt;li&gt;广州逛了逛。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_39_travel.jpg" alt="逛·吃" /&gt;&lt;figcaption&gt;逛·吃&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="第五年"&gt;第五年&lt;/h2&gt;
&lt;p&gt;2017.07 - 2018.06，焦虑回归&lt;/p&gt;
&lt;h3 id="工作-2"&gt;工作&lt;/h3&gt;
&lt;h4 id="先锋版"&gt;先锋版&lt;/h4&gt;
&lt;p&gt;我从2017年6、7月份开始做先锋版，我一开始以为是做一款代表着我们部门未来的产品，从最开始的架构设计、接入层改造，到具体的首页、分类、搜索、问答、用户信息的存储等等，全部是我一个人搞定，当时做2018项目预算的时候，也给了相对较多的资源，所以我当时还以为能好好把这做大做好。然而，好景不长，在11月份的时候，就已经被抛弃了，虽然没有明确说叫停这个项目，但从各种资源、排期上看，已经是不做这个了。当时也是失落了两周，老大为了安抚我，还给了一个小奖项。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_01_poinner.png" alt="先锋版Demo" /&gt;&lt;figcaption&gt;先锋版Demo&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="答辩"&gt;答辩&lt;/h4&gt;
&lt;p&gt;2017年年底，进行了一次晋升T3.1的答辩，讲的是内容搜索相关的，结果是没有通过，评委给出了一些不足和建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过分词对于召回的优化，没有能够从用户角度说明对用户的价值；&lt;/li&gt;
&lt;li&gt;对于ES的调优，只是使用了官方推荐，没有能够结合实际的环境进行分析验证；&lt;/li&gt;
&lt;li&gt;对于防刷的策略，没有分析并且说明实际效果；&lt;/li&gt;
&lt;li&gt;缓存使用机制可以进一步从整体上思考合理性，资源使用合理性评估不足，技术选型缺乏足够的思考。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于上面的评语，有些我认同，有些是我没有表达清楚，还有一些就是评委的问题了。总的来说，这次答辩经历对我有很大的促进作用，后面的工作中，会注意那些以前觉得差不多、就这样的点，比如，缓存命中率、使用率具体是多少。&lt;/p&gt;
&lt;h4 id="内容搜索"&gt;内容搜索&lt;/h4&gt;
&lt;p&gt;2018年开工之后，又一次组织架构的调整，内容搜索整块的东西交到了我这里，以前负责这个的相关同学都调整到别的组去了，使得我处理了不少杂事和头疼的问题。&lt;/p&gt;
&lt;h4 id="其他-2"&gt;其他&lt;/h4&gt;
&lt;p&gt;其他的工作就是做大量的业务需求和一些琐碎的工作，虽然有各种大牛、前辈说，做业务也可以提升技术云云，我是不置可否，做这些事，占了主要体力劳动，提升非常有限，也很难有时间自己去提高了。&lt;/p&gt;
&lt;p&gt;将公司的其中一个台式电脑换成了 &lt;strong&gt;ThinkPad X1&lt;/strong&gt;，入职两年半，终于拿到了一个笔记本，以后开会多也可以带上不至于浪费了时间。&lt;/p&gt;
&lt;p&gt;这半年我选了比较多的课，课上发言也多了很多，发现通过用 &lt;em&gt;手机+Google doc&lt;/em&gt; 做课堂笔记非常有效，把PPT上的重点，拍照放入google doc，然后在下面附上讲解的重点，相较于平时用的纸笔有质的飞越。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_02_course.png" alt="课程奖励" /&gt;&lt;figcaption&gt;课程奖励&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;春节休假结束回公司上班，惯例领了一些开工利是。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_03_lishi.png" alt="2018开工利是" /&gt;&lt;figcaption&gt;2018开工利是&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="生活-2"&gt;生活&lt;/h3&gt;
&lt;p&gt;2017年的国庆节去了大鹏和澳门。&lt;/p&gt;
&lt;p&gt;媳妇生日去看了一个艺术展。&lt;/p&gt;
&lt;p&gt;12月爸妈来深圳，陪玩了两天。&lt;/p&gt;
&lt;p&gt;2018年年初的春节回家，确定了婚礼的相关事宜，预定好了酒店。&lt;/p&gt;
&lt;p&gt;4月在深圳拍了婚纱照，去香港买了戒指。&lt;/p&gt;
&lt;p&gt;5月悄悄的准备了一场求婚。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2018/201806_04_life.png" alt="一个图片合集" /&gt;&lt;figcaption&gt;一个图片合集&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="尾"&gt;尾&lt;/h2&gt;
&lt;p&gt;焦虑一直伴随着我，从毕业之前的实习开始，甚至更早就有了，焦虑的起点就是： &lt;strong&gt;一直想找一个可以做一辈子的职业&lt;/strong&gt;，因为我觉得要在一个领域做到最好，就必须深耕，而不是过几年换一个。&lt;/p&gt;
&lt;p&gt;基于这个想法，我觉得，做PC的软件开发、Android开发、iOS开发、前端开发，都是每过几年就会有新的东西代替它，无法长期深入做下去，所以我不选择他们，最开始我选择做硬件、做嵌入式、做驱动，我觉得这个可以做一辈子，可以做的很深入，很牛，所以实习的时候从一个互联网公司换到了一个做路由器的公司。&lt;/p&gt;
&lt;p&gt;在做路由器的公司，做了一段时间，又有新的焦虑了：1.程序员是吃青春饭的说法开始流行；2.嵌入式已是夕阳产业，现在的热钱和人才都在互联网、移动互联网（说到底就是薪资水平低）。在这期间，我考虑过做别的更有前途的事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;做网络安全方向，研究漏洞，做白帽或者黑帽，这个永远也不会过时，以为只要自身有技术，单枪匹马挖漏洞也能挣很多钱；&lt;/li&gt;
&lt;li&gt;大数据方向，包括现在各热门的几个：
&lt;ul&gt;
&lt;li&gt;机器学习&lt;/li&gt;
&lt;li&gt;数据分析&lt;/li&gt;
&lt;li&gt;数据挖掘&lt;/li&gt;
&lt;li&gt;大数据处理、Hadoop相关&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;想的是做这种数据研究员（数据科学家）也是可以做一辈子的，随着时间增加，研究的深入，自身是会升值的。但是在投了大量的简历和经历了一些面试之后，发现这样直接突兀的转型是转不了的，因为几乎不会有企业愿意从0开始培养你。后来的经验才知道，这种转型最好的方式，是在公司内部，有需要这方面的研究人员时，你慢慢做相关的工作进行过渡，平滑的转型。&lt;/p&gt;
&lt;p&gt;后面裸辞掉了嵌入式的工作，几经辗转，最后稳定在了一个互联网公司做后台相关的工作。现在的焦虑就变成了一个—— &lt;strong&gt;程序员是吃青春饭的&lt;/strong&gt;，过几年，比如30岁之后怎么办，35岁之后怎么办，现在依然没有一个清晰的答案。&lt;/p&gt;
&lt;p&gt;现在看来，也许自己一开始就错了，并没有可以做一辈子的技术，windows、Android、iOS、前端，这些都是过几年就会被新的东西淘汰，年纪大了和一些年轻人从新学，你的年龄却并没有给自身带来相应的增值和优势，不是长久之计的。后端开发，核心的东西可以做的长久，虽然也有很多新东西，但还算是万变不离其宗，掌握基础和核心，其他的知识可以做到学起来、用起来很快，但是却逃不过吃青春饭的约束。后面的路大概两条，1.成为技术专家；2.转管理路线。在国内公司，并没有单独的技术专家，都是身兼管理职位的，专家这条路，需要的是努力和运气，都不会有一个百分之百的路径和结果。&lt;/p&gt;
&lt;p&gt;如果技术最终都要转型，其实选Android、iOS、前端这类的就更好，因为这类技术出来时间短，做到专家级相对容易。然后可以较早的从技术转到管理，平滑过渡，也有buffer时间调整。&lt;/p&gt;
&lt;p&gt;也许我的问题是，还没开始工作，就已经想到各种转型、能否做的长久了， &lt;strong&gt;想的太多，做的太少，难免流于空想&lt;/strong&gt;。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog2.karottc.com,2018-06-08:/posts/2018-06-08-the-blogs-i-read-in-those-years/</id>
    <title type="html">那些年我读过的Blog（Ⅰ）</title>
    <published>2018-06-08T12:26:17Z</published>
    <updated>2018-06-10T12:26:17Z</updated>
    <link rel="alternate" href="http://blog2.karottc.com/posts/2018-06-08-the-blogs-i-read-in-those-years/"/>
    <content type="html">&lt;h2 id="序"&gt;序&lt;/h2&gt;
&lt;p&gt;近期发现自己已经很久很久没有写过文章，其中包括公开的和非公开的Blog，于是自己去翻了以前很多关注的人的Blog，发现也已经有很大一部分没有更新了，遂有了本文，梳理一下自己那些年关注过并且现在已经不再更新的Blog。&lt;/p&gt;
&lt;p&gt;我是从2009年下半年开始看Blog的&lt;sup&gt;&lt;a href="#fn:1" name="fnref:1"&gt;1&lt;/a&gt;&lt;/sup&gt;，一直保持较高频率的时间看了4年，是这些Blog的文章伴随了我的成长，一路走来。&lt;/p&gt;
&lt;h2 id="技术类blog"&gt;技术类Blog&lt;/h2&gt;
&lt;h3 id="刘未鹏"&gt;刘未鹏&lt;/h3&gt;
&lt;p&gt;在我这里，刘未鹏是对我影响最大的，他的文章，涵盖了技术（计算机系统、算法、编程、机器学习）、心智思维、数学这些领域，常常有跨领域的交叉解释。读他的文章，对我的心智和思维提升很多。&lt;/p&gt;
&lt;p&gt;他在2009年毕业之前在&lt;a href="https://blog.csdn.net/pongba/"&gt;CSDN写文章&lt;/a&gt;，后面申请了&lt;a href="http://mindhacks.cn/"&gt;独立域名&lt;/a&gt;，就换了新的地方继续写，2012年之前，Blog的更新还是比较多的，在这之后，就很少很少写了，在这之后关注的领域也更多在了育儿方面，猜测是跟自己小孩有些关系吧。&lt;/p&gt;
&lt;p&gt;他的个人经历，在南大读了7年（本科+硕士），然后去微软亚研，然后去西雅图微软总部，现在估计在西雅图晒太阳逗女儿玩吧。&lt;/p&gt;
&lt;p&gt;刘未鹏的Blog其实现在还在更新，只是非常慢了，大概1-2年一篇，所以我也把他暂列为了不更新Blog的作者List里面。&lt;/p&gt;
&lt;p&gt;下面附上曾经的和现在的Blog地址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blog：&lt;a href="http://mindhacks.cn/" class="uri"&gt;http://mindhacks.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CSDN：&lt;a href="http://blog.csdn.net/pongba/" class="uri"&gt;http://blog.csdn.net/pongba/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;豆瓣：&lt;a href="http://book.douban.com/people/pongba/" class="uri"&gt;http://book.douban.com/people/pongba/&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="其他"&gt;其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;徐宥：&lt;a href="http://blog.youxu.info/" class="uri"&gt;http://blog.youxu.info/&lt;/a&gt;，刘未鹏的好友，Blog在2011，2012之后更新频率大幅下降；&lt;/li&gt;
&lt;li&gt;顾森：&lt;a href="http://www.matrix67.com/blog/" class="uri"&gt;http://www.matrix67.com/blog/&lt;/a&gt;，他不是数学科班的，但是文章大多是数学相关的，看了提高对数学的兴趣，也是获益不少；&lt;/li&gt;
&lt;li&gt;万维钢：&lt;a href="https://www.geekonomics10000.com/" class="uri"&gt;https://www.geekonomics10000.com/&lt;/a&gt;，提升思维和对世界的认知，前两年开始在《得到》写付费专栏之后，Blog更新频率降了非常多；&lt;/li&gt;
&lt;li&gt;fudan_abc：&lt;a href="https://blog.csdn.net/fudan_abc" class="uri"&gt;https://blog.csdn.net/fudan_abc&lt;/a&gt;，这个Blog是复旦的三个人在维护，主要是Linux内核相关的，风格比较风趣，2012年之后没有再更新了；&lt;/li&gt;
&lt;li&gt;g9：&lt;a href="https://blog.csdn.net/g9yuayon" class="uri"&gt;https://blog.csdn.net/g9yuayon&lt;/a&gt;，和徐宥他们是好友，也是从徐宥那里知道他的blog，不更新好多年了，但是还是可以把历史文章一看；&lt;/li&gt;
&lt;li&gt;July：&lt;a href="https://blog.csdn.net/v_JULY_v" class="uri"&gt;https://blog.csdn.net/v_JULY_v&lt;/a&gt;，他的文章对付面试挺有用的，所以后面本人也创业做在线教育、培训相关的了；&lt;/li&gt;
&lt;li&gt;陈硕：&lt;a href="https://blog.csdn.net/Solstice" class="uri"&gt;https://blog.csdn.net/Solstice&lt;/a&gt;，Muduo网络库的作者，Blog主要是Linux、网络的偏多；&lt;/li&gt;
&lt;li&gt;吴翰清：&lt;a href="http://taosay.net/" class="uri"&gt;http://taosay.net/&lt;/a&gt;，人称道哥，网络安全的，Blog不更新很多年了，后面改写微信公众号了，先是阿里安全专家，后创业，然后公司又被阿里收购，被阿里收购之后，微信公众号也没有再更新过了。&lt;/li&gt;
&lt;li&gt;池建强：&lt;a href="http://www.cnblogs.com/Michael282694/" class="uri"&gt;http://www.cnblogs.com/Michael282694/&lt;/a&gt;，后面写微信公众号之后，把这个Blog的文章写清空了，这个地址现在没有任何东西；&lt;/li&gt;
&lt;li&gt;张丹：&lt;a href="http://blog.fens.me/about/" class="uri"&gt;http://blog.fens.me/about/&lt;/a&gt;，10+年工作经验，从程序员做到构架师，再转型为数据科学家。这个地址现在已经打不开了，不知道是Blog迁移了，还是不维护了；&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/phphot" class="uri"&gt;https://blog.csdn.net/phphot&lt;/a&gt;，当年CSDN排名第一的Blog，2009年之后没有更新了；&lt;/li&gt;
&lt;li&gt;王远轩：&lt;a href="http://blog.yxwang.me/" class="uri"&gt;http://blog.yxwang.me/&lt;/a&gt;，2013 复旦研究生，2013年之后很少更新Blog了；&lt;/li&gt;
&lt;li&gt;Lucida：&lt;a href="http://www.cnblogs.com/figure9/" class="uri"&gt;http://www.cnblogs.com/figure9/&lt;/a&gt;，&lt;a href="http://zh.lucida.me/" class="uri"&gt;http://zh.lucida.me/&lt;/a&gt;，2013毕业在Google工作三年，2017年初加入Facebook，2016年之后机会很少更新Blog，据他自己描述，后面也不会更新高质量的文章了，太耗费精力了，没有那么多时间。&lt;em&gt;他的文章有很多关于程序员书单，学习路径的书&lt;/em&gt;；&lt;/li&gt;
&lt;li&gt;郭佳宝：&lt;a href="https://www.byvoid.com/" class="uri"&gt;https://www.byvoid.com/&lt;/a&gt;，清华计算机，中学就开始NOIP比赛，刚上大一就写了一本书《&lt;a href="https://www.byvoid.com/zht/project/node"&gt;Node.js開發指南&lt;/a&gt;》毕业之后主要是写全世界旅游的游记，之前有很多好的技术文章；&lt;/li&gt;
&lt;li&gt;林爽：&lt;a href="https://linshuang.info/" class="uri"&gt;https://linshuang.info/&lt;/a&gt;，郭佳宝的好友，目前Blog已不能访问；&lt;/li&gt;
&lt;li&gt;张佳伟：&lt;a href="http://ghosertblog.github.io/" class="uri"&gt;http://ghosertblog.github.io/&lt;/a&gt;，cmd markdown在线编辑器作者；&lt;/li&gt;
&lt;li&gt;张亮：&lt;a href="https://blog.csdn.net/sparkliang" class="uri"&gt;https://blog.csdn.net/sparkliang&lt;/a&gt;，《Libevent源码剖析》作者，2016年之后Blog就没有再更新了；&lt;/li&gt;
&lt;li&gt;吴垠：&lt;a href="https://blog.csdn.net/wooin" class="uri"&gt;https://blog.csdn.net/wooin&lt;/a&gt;，2008年之后就没有再更新了，他的VIM配置相关的文章，让我受益多年，尤其是刚入行的时候帮助很大；&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.sina.com.cn/s/articlelist_1664227735_0_1.html" class="uri"&gt;http://blog.sina.com.cn/s/articlelist_1664227735_0_1.html&lt;/a&gt;，淘宝的故事和技术；&lt;/li&gt;
&lt;li&gt;王飞：&lt;a href="http://ibuick.com/" class="uri"&gt;http://ibuick.com/&lt;/a&gt;，一名程序员，也是一名OS X / iOS科技文章作者，大学英语专业，后来因JAVA进入IT界。开发的软件大都是OSX平台的，比如desktopforecasting、icheck等。著有《OSX高手进阶》，参与创建APP分享站疯狂盒子。言辞犀利，率性而为，自称职业果粉，坚决的抵制一切盗版，算是程序员中的另类；&lt;/li&gt;
&lt;li&gt;陈梓涵：&lt;a href="http://www.cppblog.com/vczh" class="uri"&gt;http://www.cppblog.com/vczh&lt;/a&gt;，网名叫 &lt;strong&gt;vczh&lt;/strong&gt;，目前在微软西雅图，C++领域大牛，github上有个人作品；&lt;/li&gt;
&lt;li&gt;何咏：&lt;a href="http://www.csyong.net/index.php" class="uri"&gt;http://www.csyong.net/index.php&lt;/a&gt;，vczh的好友；&lt;/li&gt;
&lt;li&gt;余昊：&lt;a href="http://www.luanxiang.org/blog/" class="uri"&gt;http://www.luanxiang.org/blog/&lt;/a&gt;，近两年，主要在写微信公众号了，Blog不怎么更新了；&lt;/li&gt;
&lt;li&gt;kedebug：&lt;a href="http://kedebug.me/" class="uri"&gt;http://kedebug.me/&lt;/a&gt;，文章被删掉不少；&lt;/li&gt;
&lt;li&gt;李华明：&lt;a href="http://www.himigame.com/" class="uri"&gt;http://www.himigame.com/&lt;/a&gt;，2013年左右，移动开发领域红极一时的Blog，不过我做后端的，感觉这个Blog不是很有意义；&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/Dahaka" class="uri"&gt;http://www.cnblogs.com/Dahaka&lt;/a&gt;，隔壁班的大牛，接触计算机很早，毕业之后几乎不写Blog了；&lt;/li&gt;
&lt;li&gt;kongfy：&lt;a href="http://blog.kongfy.com/" class="uri"&gt;http://blog.kongfy.com/&lt;/a&gt;，南大本科+研究生，做分布式数据库相关开发，两年没有更新Blog了，以前的文章质量较高；&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.blogjava.net/Hafeyang/" class="uri"&gt;http://www.blogjava.net/Hafeyang/&lt;/a&gt;，前端开发的Blog，2012年之后没有更新了；&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.wysaid.org/" class="uri"&gt;http://blog.wysaid.org/&lt;/a&gt;，有很多图形图像处理相关的实用技能；&lt;/li&gt;
&lt;li&gt;其他几个：
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://oilbeater.com/" class="uri"&gt;http://oilbeater.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/xiaxi/" class="uri"&gt;http://www.cnblogs.com/xiaxi/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.martianz.cn/" class="uri"&gt;http://blog.martianz.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.yangzhiping.com/tech/" class="uri"&gt;https://www.yangzhiping.com/tech/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="非技术类blog"&gt;非技术类Blog&lt;/h2&gt;
&lt;h3 id="绝影"&gt;绝影&lt;/h3&gt;
&lt;p&gt;在我还对程序世界一无所知的时候，他通过故事给了我认知。他是《&lt;a href="https://book.douban.com/subject/3267945/"&gt;疯狂程序员&lt;/a&gt;》的作者，一直在CSDN上连载这个小说，可惜现在他的CSDN主页已经被封了。&lt;/p&gt;
&lt;p&gt;四川人，常搞一些软件破解类的事。&lt;/p&gt;
&lt;p&gt;CSDN主页：&lt;a href="http://blog.csdn.net/hitetoshi" class="uri"&gt;http://blog.csdn.net/hitetoshi&lt;/a&gt;，已经被封了。&lt;/p&gt;
&lt;h3 id="其他-1"&gt;其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;norains：&lt;a href="https://blog.csdn.net/norains" class="uri"&gt;https://blog.csdn.net/norains&lt;/a&gt;，小说《&lt;a href="https://book.douban.com/subject/24696924/"&gt;一个程序员的奋斗史&lt;/a&gt;》的作者，主要搞WinCE相关开发，小说连载完成后，再也没有更新了；&lt;/li&gt;
&lt;li&gt;王信文：&lt;a href="http://verypig.com/" class="uri"&gt;http://verypig.com/&lt;/a&gt;，创办的莉莉丝，手游《刀塔传奇》火了之后，Blog再也没有更新了；&lt;/li&gt;
&lt;li&gt;陈小花：&lt;a href="http://chenxiaohua.net/" class="uri"&gt;http://chenxiaohua.net/&lt;/a&gt;，王信文的老婆，Blog也几年没更新，偶尔写篇文章，当然现在早就转移到微信公众号写文章了，婚前的文章挺好的，婚后的文章，主题变了，看得少了；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="尾"&gt;尾&lt;/h2&gt;
&lt;p&gt;上面列的都是曾经我看过优质并且更新的Blog，如今都不怎么更新了，还有一些遗漏的，不过不想花更多的精力去补全了。很多人不写了，大概有如下几点原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;年龄渐增，精力有限，没有那么多时间写出高质量的文章了，索性不写了；&lt;/li&gt;
&lt;li&gt;转移到别的平台去了：
&lt;ul&gt;
&lt;li&gt;免费的微信公众号；&lt;/li&gt;
&lt;li&gt;付费的各种专栏，《得到》，《极客时间》等等；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;觉得写文章花时间和精力，收益小，不想写了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而我看了不少文章，自己却不爱写，可能还是输入的不够，写不出来吧。&lt;/p&gt;
&lt;p&gt;下一篇文章我会写写我看过的Blog，目前还在更新的。&lt;/p&gt;
&lt;h4 id="footnotes"&gt;Footnotes:&lt;/h4&gt;
&lt;p&gt;&lt;sup&gt;&lt;a href="#fnref:1" name="fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; 因为这个时间我刚刚踏入大学的校门，大学之前几乎没有网络，对Blog也是一无所知。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog2.karottc.com,2017-08-25:/posts/2017-08-25-play-king-of-glory-9-months/</id>
    <title type="html">我玩王者荣耀这九个月</title>
    <published>2017-08-25T12:26:17Z</published>
    <updated>2017-05-25T12:26:17Z</updated>
    <link rel="alternate" href="http://blog2.karottc.com/posts/2017-08-25-play-king-of-glory-9-months/"/>
    <content type="html">&lt;p&gt;从去年12月份（准确的时间是：2016.12.01）开始玩王者荣耀，到现在也差不多9个月了，从最开始的狂热，到现在淡漠。所以今天就来回顾一下，谈谈得失，梳理一下心路历程的变化。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2017/20170825_game_01.JPG" alt="最高段位" /&gt;&lt;figcaption&gt;最高段位&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="入坑"&gt;入坑&lt;/h2&gt;
&lt;p&gt;都过去九个月了，已经不记得当时是由于什么原因开始玩这个游戏了，只记得在一个黄昏，下载了游戏，然后趁着吃晚饭的时间，过完了新手教程，然后买了两个英雄开始玩，当时前一周依然不不会玩（比如不知道应该走哪条线，不看小图等等），都是瞎玩，这种状态下每天都玩了好几局，现在回过头看，也没想通当时哪里来的动力玩这么多，因为完全是抓瞎状态，也体会不到游戏的乐趣才是。&lt;/p&gt;
&lt;p&gt;后面开始学习玩这个游戏的基本法，学习每个位置/英雄要走什么路线，应该是什么样的套路，看了很多攻略，看了很多直播，关注了很多人玩。逐渐的自己也上道了。&lt;/p&gt;
&lt;p&gt;这大概是4个月之后了，也就是前4个月，大概平均每天玩了10场，看到这个数字的时候，我自己也惊呆了，以场均20分钟来算，也是200分钟，也就是整整3个多小时，把我吓得眼泪都横着流了。&lt;/p&gt;
&lt;h2 id="挣扎"&gt;挣扎&lt;/h2&gt;
&lt;p&gt;本以为自己会玩之后就能很快的上到王者了，一段时间之后，发现自己还是太天真，这个游戏的设计就是让你的胜率在50%，无论你会不会玩，胜率都是在50%，除非你真的是1打九的大神，因为看很多主播和职业选手，单排也时常翻车。&lt;/p&gt;
&lt;p&gt;然而我当然不会就此认命，我依然在不停的看攻略-&amp;gt;实践-&amp;gt;排位-&amp;gt;看攻略这个循环中，依然相信，可以靠实力达到最高段位。这样又持续了三四个月，中间还横跨了一个赛季，而我的胜率始终在52%左右，输输赢赢，段位始终还是上不去。然后我放弃了，在某个深夜打了游戏，被队友弄得一肚子火气的时候，突然就放弃了。&lt;/p&gt;
&lt;p&gt;现在我依然相信自己进行上面那个循环可以达到最高段位，只是我现在并不愿意花这个时间了。回想自己当时玩这个游戏的初衷，只是为了社交，没料到自己却沉迷了，以为现在的技术水平（任何位置都能玩，有意识、有技术，虽然不是顶级，但是也够用了），应付社交足够了，既然目的已经达到，是时候退场换去干点别的了，比如年初的计划，到现在依然是一片空白。&lt;/p&gt;
&lt;h2 id="反思"&gt;反思&lt;/h2&gt;
&lt;p&gt;玩游戏这个几个月然我看到自己的意志力其实不值一提（以前还以为自己的意志力还可以），以前看到书上说意志力一样很耗体力，如果你在别的地方消耗了你的意志力，在另一个地方你的意志力会减弱，此言不虚啊。如果不是游戏的这种策略，反复的折腾你，还让你上不去段位，我估计还沉迷在游戏中，由于反复的被折腾，愤怒值达到顶点，然后放弃了这个所谓的全民游戏，还是应该好好感谢一下吧。&lt;/p&gt;
&lt;p&gt;这之后开始思考，这个游戏是什么原因让人沉迷和上瘾的，看了很多的分析，看了一本书《上瘾五百年》，还是没有找到让自己不上瘾的办法，真是那句——道理我都懂，就是做不到吧。&lt;/p&gt;
&lt;p&gt;不玩游戏之后，我发现时间多了起来，然后发现已经很久没有写过东西，那就从这篇开始，恢复状态吧。&lt;/p&gt;
&lt;h4 id="footnotes"&gt;Footnotes&lt;/h4&gt;
&lt;p&gt;题图就是我玩这个游戏达到的最高段位了。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog2.karottc.com,2016-11-26:/posts/2016-11-26-socket-read-function/</id>
    <title type="html">Linux网络中的read函数</title>
    <published>2016-11-26T12:26:17Z</published>
    <updated>2016-11-26T12:26:17Z</updated>
    <link rel="alternate" href="http://blog2.karottc.com/posts/2016-11-26-socket-read-function/"/>
    <content type="html">&lt;p&gt;这是一篇查漏补缺的文章，探究一下linux网络编程中read函数的几种返回值，以及分别在什么情况下发生的，当然也会顺带提及 &lt;em&gt;TCP&lt;/em&gt; 的一点点知识（毕竟谈到网络是离不开TCP的）。&lt;/p&gt;
&lt;p&gt;为了验证，写了一个 client 和 server 来测试相关的东西。&lt;/p&gt;
&lt;h2 id="tcp的三次握手和三次挥手"&gt;TCP的三次握手和三次挥手&lt;/h2&gt;
&lt;p&gt;是的，你没看错，是三次挥手，而不是四次。一般情况下，TCP在建立连接是需要三次握手，在断开连接时需要四次挥手，但是有时只需要三次挥手就够了，下图是我用tcpdump的抓包情况：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2016/20161126_read_01.png" alt="tcp连接过程" /&gt;&lt;figcaption&gt;tcp连接过程&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;上图可以分为三个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立连接，三次握手，红色部分；&lt;/li&gt;
&lt;li&gt;数据传输，蓝色部分；&lt;/li&gt;
&lt;li&gt;关闭连接，三次挥手，紫色部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对应TCP的传输过程如下：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2016/20161126_read_02.png" alt="tcp传输过程" /&gt;&lt;figcaption&gt;tcp传输过程&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;出现三次挥手的原因是因为，被动关闭连接的一端（本图中的 server 端）缓冲区内没有需要发送的数据，所以将ACK 和 FIN 合并发送给了 Client 端。如果 server 端收到 FIN 时缓冲区内还有未发送的数据，那么 server 端会先回 ACK，等到数据发送完成，再发送 FIN，这样就是通常我们看到的四次挥手了。&lt;/p&gt;
&lt;h2 id="阻塞模式下对-readwrite-的测试"&gt;阻塞模式下对 read/write 的测试&lt;/h2&gt;
&lt;h3 id="测试1"&gt;测试1&lt;/h3&gt;
&lt;p&gt;流程如下：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2016/20161126_read_03.png" alt="测试1" /&gt;&lt;figcaption&gt;测试1&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;当缓冲区还有未读取的数据时，调用 close 函数关闭 socket，会触发 TCP 发送 RST，此时对方等到数据接收，调用 read 函数，会得到 &lt;strong&gt;-1&lt;/strong&gt; 的返回值，&lt;strong&gt;errno&lt;/strong&gt; 被设置为104 (&lt;em&gt;Connection reset by peer&lt;/em&gt;)，如果在收到 RST 之后仍然继续调用 write 函数，会触发系统的 SIGPIPE 信号，导致程序退出（如果未处理该信号的话）。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2016/20161126_read_04.png" alt="sigpipe信号" /&gt;&lt;figcaption&gt;sigpipe信号&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="测试2"&gt;测试2&lt;/h3&gt;
&lt;p&gt;流程如下：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2016/20161126_read_05.png" alt="测试2" /&gt;&lt;figcaption&gt;测试2&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;当对方已经关闭连接时（即对方发送了 FIN），此时再调用 write 写数据，会触发对方发送一个 RST，如果忽略 SIGPIPE 信号，继续 write 数据，得到的返回值是 &lt;strong&gt;-1&lt;/strong&gt;，&lt;strong&gt;errno&lt;/strong&gt;被设置为32(&lt;em&gt;Broken pipe&lt;/em&gt;)。&lt;/p&gt;
&lt;h3 id="测试3"&gt;测试3&lt;/h3&gt;
&lt;p&gt;流程如下：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2016/20161126_read_06.png" alt="测试3" /&gt;&lt;figcaption&gt;测试3&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;调用 &lt;em&gt;setsockopt&lt;/em&gt; 给read设置一个超时时间(&lt;code&gt;setsockopt(sockfd, SOL_SOCKET,SO_RCVTIMEO, &amp;amp;ti, sizeof(ti));&lt;/code&gt; )，超时之后，read函数返回&lt;strong&gt;-1&lt;/strong&gt;，&lt;strong&gt;errno&lt;/strong&gt;被设置为11(&lt;em&gt;Resource temporarily unavailable&lt;/em&gt;)。&lt;/p&gt;
&lt;h2 id="非阻塞模式下对read的测试"&gt;非阻塞模式下对read的测试&lt;/h2&gt;
&lt;p&gt;使用 &lt;em&gt;fcntl&lt;/em&gt; 设置socket为非阻塞模式，调用 read 的结果是会立刻返回 &lt;strong&gt;-1&lt;/strong&gt;，然后&lt;strong&gt;errno&lt;/strong&gt;被设置为了11。&lt;/p&gt;
&lt;h2 id="结论"&gt;结论&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;read&lt;/strong&gt; 函数返回值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大于0：成功读取的数据长度（Byte）；&lt;/li&gt;
&lt;li&gt;等于0：该 socket 已经关闭；&lt;/li&gt;
&lt;li&gt;等于-1：异常发生，包括但不限于以下几种：&lt;/li&gt;
&lt;li&gt;超时,errno=11；&lt;/li&gt;
&lt;li&gt;连接异常关闭（RST）,errno=104；&lt;/li&gt;
&lt;li&gt;主动关闭socket后再去 read,errno=9；&lt;/li&gt;
&lt;li&gt;非阻塞模式下的没有数据时，errno=11。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;write&lt;/strong&gt; 函数返回值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大于0：成功写入的数据长度（Byte）；&lt;/li&gt;
&lt;li&gt;等于0：写入长度为0；&lt;/li&gt;
&lt;li&gt;小于0：异常发生，包括但不限于以下几种：&lt;/li&gt;
&lt;li&gt;主动关闭再写数据,errno=9；&lt;/li&gt;
&lt;li&gt;连接异常关闭（RST）之后再写数据,errno=32。&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog2.karottc.com,2016-11-19:/posts/2016-11-19-tcp/</id>
    <title type="html">一张图了解TCP</title>
    <published>2016-11-19T12:26:17Z</published>
    <updated>2016-11-19T12:26:17Z</updated>
    <link rel="alternate" href="http://blog2.karottc.com/posts/2016-11-19-tcp/"/>
    <content type="html">&lt;p&gt;从下面一张图了解TCP：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2016/TCP.svg" alt="TCP" /&gt;&lt;figcaption&gt;TCP&lt;/figcaption&gt;
&lt;/figure&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog2.karottc.com,2016-11-05:/posts/2016-11-05-data-mining-and-its-application/</id>
    <title type="html">据挖掘及其应用 —— 杨强讲座</title>
    <published>2016-11-05T12:26:17Z</published>
    <updated>2016-11-05T12:26:17Z</updated>
    <link rel="alternate" href="http://blog2.karottc.com/posts/2016-11-05-data-mining-and-its-application/"/>
    <content type="html">&lt;figure&gt;
&lt;img src="/static/images/2016/yangqiang.jpg" alt="杨强教授简介" /&gt;&lt;figcaption&gt;杨强教授简介&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;今天（2016.11.04）公司请了 &lt;strong&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E6%9D%A8%E5%BC%BA"&gt;杨强教授&lt;/a&gt;&lt;/strong&gt; 来分享数据挖掘及其应用相关的东西，下面记录一下整个内容。&lt;/p&gt;
&lt;h2 id="引子"&gt;引子&lt;/h2&gt;
&lt;p&gt;首先 &lt;a href="http://baike.baidu.com/item/%E6%9B%BE%E5%AE%87/12003748"&gt;曾宇&lt;/a&gt; 上去为杨强讲授的讲话做了铺垫，观点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应该拥抱变化，顺应技术趋势的发展；&lt;/li&gt;
&lt;li&gt;了解这些技术能做什么、不能做什么；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以请了杨教授来分享一些心得，和解答大家的疑惑。&lt;/p&gt;
&lt;h2 id="分享内容"&gt;分享内容&lt;/h2&gt;
&lt;p&gt;今天跟大家的分享的内容是数据挖掘及其应用，数据挖掘和现在讲的人工智能还是有些区别的，区别是什么，下面会讲到。&lt;/p&gt;
&lt;h3 id="案例分享"&gt;案例分享&lt;/h3&gt;
&lt;h4 id="百合网"&gt;百合网&lt;/h4&gt;
&lt;p&gt;一张图，两个人聊天的时候从哪儿（一个地方）到哪儿（另一个地方的）图形。&lt;/p&gt;
&lt;p&gt;什么是数据挖掘：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总结过去；&lt;/li&gt;
&lt;li&gt;预测未来；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据挖掘首先是根据已有数据进行总结，然后还可以建立模型预测未来，预测未来更多的是人工智能做的事。比如根据百合网这个可以问的问题是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都是哪些人在网上找对象；&lt;/li&gt;
&lt;li&gt;他们的教育水平如何；&lt;/li&gt;
&lt;li&gt;男女比例如何；&lt;/li&gt;
&lt;li&gt;交谈的时间（比如男生很快就会对一个女生不感兴趣，然后转变一个聊天的对象）；&lt;/li&gt;
&lt;li&gt;钱有多重要（对男生来说，对方的工资水平没有多重要，女生对对方的要求一直是上升趋势）；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据挖掘是离不开人的，要成为数据挖掘的专家，首先一点是离不开直觉，这个直觉是找到&lt;strong&gt;特征&lt;/strong&gt;的直觉。所以特征工程和特征工程师是数据挖掘的未来，是数据挖掘必不可少的一部分。但是对于百合网这样的网站，特征工程并不那么重要，原因是大家关注的特征就那么很少的几个。&lt;/p&gt;
&lt;h4 id="coursera教学数据"&gt;Coursera教学数据&lt;/h4&gt;
&lt;p&gt;香港科技大学在coursera的教学数据，通过对视频的观看数据，可以找到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;来分析比较作业A和B，哪个更难，比如，大部分学生反复的回看，说明这里比较难和重要，当然也有可能是期末考试和期中考试。&lt;/li&gt;
&lt;li&gt;可以观察不同地域学生的学习方式的差异，比如，美国学生喜欢从一个概念出发，然后在视频中找到那个概念看，（比较有跳跃性），而中国学生，往往是从头看到尾。&lt;/li&gt;
&lt;li&gt;爱讨论的学生是不是成绩也比较好。&lt;/li&gt;
&lt;li&gt;好学生和差学生的社交网络图。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两个例子，第一个百合网的例子是所有的行为都在网上进行——即足迹电子化，第二个也有这个特点，因为是在网上教学。但是我们身边的工作和生活并不是这样，我们所有的行为，大部分数据都没有电子化，都丢失了。&lt;/p&gt;
&lt;p&gt;所以数据挖掘第一步是找到这些数据，把各种不同的数据整合起来，使不同的数据之间有关系。第二个是特征工程。第三个是样本缺乏，要做预测就需要高质量的样本。&lt;/p&gt;
&lt;h4 id="推荐系统"&gt;推荐系统&lt;/h4&gt;
&lt;p&gt;人工智能的语音、图像的成功，在这两个成功之前的成功就是推荐系统，比如淘宝、亚马逊。推荐系统的数据可以用一个图模型来表示，一个点表示一个产品或者用户。补齐矩阵中缺失的值。�&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据整合很重要；&lt;/li&gt;
&lt;li&gt;特征工程是关键；&lt;/li&gt;
&lt;li&gt;样本缺乏是一个很头疼的问题；&lt;/li&gt;
&lt;li&gt;训练数据和测试数据可能有很大不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="移动领域-学术界的工作"&gt;移动领域-学术界的工作&lt;/h3&gt;
&lt;p&gt;以诺基亚做的实验开始，现在通过一个手机，基本可以知道一个人的性别、收入等等很多数据。&lt;/p&gt;
&lt;p&gt;另一个实验，收集couple 在房间生活的所有数据，然后用了一个模型迁移，来判断当一个人在某一个区域的时候，就能知道他在做什么。&lt;/p&gt;
&lt;p&gt;在移动领域，数据来源两个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随身携带的设备；&lt;/li&gt;
&lt;li&gt;网络上，知识图谱，网络关系等；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于样本缺乏，所以迁移模型就很可贵。&lt;/p&gt;
&lt;h3 id="舆情分析"&gt;舆情分析&lt;/h3&gt;
&lt;p&gt;舆情分析是一个有监督学习的特例。每个领域舆情的词有一定关联。迁移学习，整合数据，把一个领域的模型迁移到另一个领域。把虚拟世界和物理世界联系起来。&lt;/p&gt;
&lt;p&gt;例子一：对人人网的垃圾用户建模：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户的周边人；&lt;/li&gt;
&lt;li&gt;标注用户正常、异常；&lt;/li&gt;
&lt;li&gt;用户行为，比如晚上发邮件，发给陌生人；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子2：伯克利大学基于深度学习的迁移学习，在一个图片领域，要学一个比较好的图片的话，需要上千万的图片，很长的时间才能做到，但是，如果学习任务变了，又不希望用那么多图片来重新训练，怎么办呢，可以把其中一些影视层固定住，把一些高层的东西来重新学习，这样发现这个办法是非常好的，这两者有一个自然的结合。&lt;/p&gt;
&lt;h3 id="对话系统"&gt;对话系统&lt;/h3&gt;
&lt;p&gt;研究拿一些真实的用户对话数据来训练对话系统，这个系统重要特点是以完成一个任务为主的，比如他最后要下一个订单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动对话功能，回答比较靠谱；—— 深度学习&lt;/li&gt;
&lt;li&gt;真能完成一个任务，每次回答都能知道现在到哪儿了，距离目的还有多远；——强化学习&lt;/li&gt;
&lt;li&gt;可以个性化，每个人的回答不一样，知道一些喜好，跳过一些繁琐的问答。——迁移学习&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这三个一起是强化迁移学习，公司的订餐系统。这个模型是一个通用性的模型，把这个框架用在阅读上，让机器读完一本书，然后来问一下特定的场景和段落，比如XXX的情人是谁，XXX和XXX有过什么交流。&lt;/p&gt;
&lt;p&gt;以上就是全部分享内容。&lt;/p&gt;
&lt;h2 id="其他"&gt;其他&lt;/h2&gt;
&lt;p&gt;目前人工智能的成功，还需要在一个特定的场景。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog2.karottc.com,2015-07-29:/posts/2015-07-29-cpp-reference/</id>
    <title type="html">C++的引用类型的变量到底占不占用内存空间？</title>
    <published>2015-07-29T12:26:17Z</published>
    <updated>2015-07-29T12:26:17Z</updated>
    <link rel="alternate" href="http://blog2.karottc.com/posts/2015-07-29-cpp-reference/"/>
    <content type="html">&lt;p&gt;分析一下 &lt;strong&gt;C++&lt;/strong&gt; 里面的引用类型（例如：&lt;code&gt;int &amp;amp;r = a;&lt;/code&gt; ）中的 &lt;code&gt;r&lt;/code&gt; 变量是否占用内存空间呢？是否和 &lt;code&gt;int *p = &amp;amp;a;&lt;/code&gt; 中的 &lt;code&gt;p&lt;/code&gt; 变量一样占用内存空间呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文将给出答案。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;直接看一个简单的例子：&lt;br /&gt;&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode cpp"&gt;&lt;code class="sourceCode cpp"&gt;&lt;span class="pp"&gt;#include &lt;/span&gt;&lt;span class="im"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class="kw"&gt;using&lt;/span&gt; &lt;span class="kw"&gt;namespace&lt;/span&gt; std;

&lt;span class="dt"&gt;int&lt;/span&gt; main(&lt;span class="dt"&gt;void&lt;/span&gt;)
{
    &lt;span class="dt"&gt;int&lt;/span&gt; a = &lt;span class="dv"&gt;6&lt;/span&gt;;
    &lt;span class="dt"&gt;int&lt;/span&gt; &amp;amp;r = a;
    &lt;span class="dt"&gt;int&lt;/span&gt; *p = &amp;amp;a;
    &lt;span class="dt"&gt;int&lt;/span&gt; x = r;
    &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着我们通过 &lt;code&gt;g++ testref.cpp -o testref -g&lt;/code&gt; 来编译之后，用gdb来加载它，看看 &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; 的地址分别是多少:&lt;br /&gt; &lt;img src="/static/images/201501/20150729-01-gdb.png" alt="gdb" /&gt; 上图中 &lt;code&gt;a&lt;/code&gt; 的地址为 &lt;code&gt;0x7fffffffe208&lt;/code&gt;，用取地址符去获取 &lt;code&gt;r&lt;/code&gt; 地址，值和 &lt;code&gt;a&lt;/code&gt; 是一样的，其实，用 &lt;code&gt;&amp;amp;&lt;/code&gt; 符号是不能获取到引用类型变量的地址的，因为引用类型的变量本身只是另一个对象的别名，用可感知的方式描述，就是它仅仅是一个名字而已，对它的任何操作都是相当于对另一个对象的操作，所以这个取地址操作也是一样。&lt;/p&gt;
&lt;p&gt;但是，我们接着往下看，&lt;code&gt;p&lt;/code&gt; 的地址是 &lt;code&gt;0x7fffffffe218&lt;/code&gt;，和 &lt;code&gt;a&lt;/code&gt; 的地址刚刚相差了 &lt;strong&gt;16&lt;/strong&gt; 字节，接着看 &lt;code&gt;x&lt;/code&gt; 的地址是 &lt;code&gt;0x7fffffffe20c&lt;/code&gt;，这个地址正好是 &lt;code&gt;a&lt;/code&gt;的地址 &lt;code&gt;0x7fffffffe208 + 4&lt;/code&gt;, 而 &lt;code&gt;a&lt;/code&gt; 是 &lt;code&gt;int&lt;/code&gt; 型，变量本身占用 4 字节，正常情况下， &lt;code&gt;x&lt;/code&gt; 的地址应该是 &lt;code&gt;p&lt;/code&gt; 的地址 &lt;code&gt;0x7fffffffe218 + 8&lt;/code&gt;，这里 &lt;code&gt;+8&lt;/code&gt; 是因为我的机器是 64 位的机器，所以指针类型占用 8 字节。现在这种情况应该是编译器做了优化，把 &lt;code&gt;x&lt;/code&gt; 的放到了 &lt;code&gt;a&lt;/code&gt; 的后面，同样的，&lt;code&gt;x&lt;/code&gt; 的下一个变量的起始地址应该是 &lt;code&gt;0x7fffffffe20c + 4&lt;/code&gt; = &lt;code&gt;0x7fffffffe210&lt;/code&gt;，这个地址和 &lt;code&gt;p&lt;/code&gt; 之间刚好差了 8 个字节，也就是一个指针变量的地址，所以答案就很明显了。&lt;/p&gt;
&lt;p&gt;即，我们现在可以猜测，&lt;code&gt;r&lt;/code&gt; &lt;strong&gt;是占用内存空间，并且占用的大小和指针变量相同大小&lt;/strong&gt;。但是我们上面用gdb也看不了 &lt;code&gt;r&lt;/code&gt; 的实际地址，所以这也只能是猜测，只是看似合理的猜测而已。&lt;/p&gt;
&lt;p&gt;为了证明这个猜测，我们继续把可执行文件反汇编出来看看：&lt;code&gt;objdump -d testref&lt;/code&gt; 得到的结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;00000000004006cd &amp;lt;main&amp;gt;:
  4006cd:   55                      push   %rbp
  4006ce:   48 89 e5                mov    %rsp,%rbp
  4006d1:   c7 45 e8 06 00 00 00    movl   $0x6,-0x18(%rbp)   # int a = 6; a的地址 0x18
  4006d8:   48 8d 45 e8             lea    -0x18(%rbp),%rax
  4006dc:   48 89 45 f0             mov    %rax,-0x10(%rbp)   # int &amp;amp;r = a; r的地址 0x10
  4006e0:   48 8d 45 e8             lea    -0x18(%rbp),%rax
  4006e4:   48 89 45 f8             mov    %rax,-0x8(%rbp)    # int *p = &amp;amp;a; p的地址 0x8
  4006e8:   48 8b 45 f0             mov    -0x10(%rbp),%rax  # 下面两行是为了后面的赋值做准备
  4006ec:   8b 00                   mov    (%rax),%eax
  4006ee:   89 45 ec                mov    %eax,-0x14(%rbp)   # int x = r;   x的地址 0x14
  4006f1:   b8 00 00 00 00          mov    $0x0,%eax
  4006f6:   5d                      pop    %rbp
  4006f7:   c3                      retq &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我把对应处，都写在上面的注释里了。&lt;/p&gt;
&lt;p&gt;所以，现在可以得到结论：&lt;font color='red'&gt;&lt;strong&gt;引用类型的变量会占用内存空间，占用的内存空间的大小和指针类型的大小是相同的。&lt;/strong&gt;&lt;/font&gt; 从上面的汇编代码可以看出，虽然引用是一个对象的别名，但是在汇编层面，和指针是一样的。&lt;/p&gt;
&lt;p&gt;2015.07.29&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog2.karottc.com,2015-07-26:/posts/2015-07-26-zhihu-sarcasm/</id>
    <title type="html">抓取知乎每日吐槽</title>
    <published>2015-07-26T12:26:17Z</published>
    <updated>2015-07-26T12:26:17Z</updated>
    <link rel="alternate" href="http://blog2.karottc.com/posts/2015-07-26-zhihu-sarcasm/"/>
    <content type="html">&lt;p&gt;&lt;strong&gt;知乎日报&lt;/strong&gt; 里面有一节，叫做⎾如何正确的吐槽⏌，里面有很多很有意思而有短小的回答，基本上我我每天都会看一眼。所以我就写了脚本把他们全部抓了下来，放到自己的服务器上，同时每天还在定时去抓取当天新出来的数据，然后用 &lt;em&gt;swift&lt;/em&gt; 写了一个 app 来从自己的服务器获取数据来看。&lt;/p&gt;
&lt;p&gt;下面记录一下做这件事的过程。&lt;/p&gt;
&lt;h2 id="抓取数据"&gt;抓取数据&lt;/h2&gt;
&lt;p&gt;要抓取知乎的吐槽数据，第一步就是要知道它对应的 &lt;em&gt;URL&lt;/em&gt; ，这个获取方法也很简单，直接抓个包就能知道了，具体的形式大概如下这样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://news-at.zhihu.com/api/4/section/2/before/xxxxxx&lt;/code&gt; , 这个是获取整个吐槽的标题列表的url；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://news-at.zhihu.com/api/4/story/xxxxx&lt;/code&gt; ，这个是获取具体某一天的内容的url。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="创建数据库"&gt;创建数据库&lt;/h3&gt;
&lt;p&gt;这个数据量并不大，我建了两张表，一张存索引，一张存每天具体的内容。如下图：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/201501/20150726-zhihu-mysql.png" alt="Mysql表" /&gt;&lt;figcaption&gt;Mysql表&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="搭建服务器"&gt;搭建服务器&lt;/h3&gt;
&lt;p&gt;有了数据，下一步就是提供 &lt;em&gt;CGI&lt;/em&gt; 接口给外部调用获取数据，然后显示。&lt;/p&gt;
&lt;p&gt;然后，我用 &lt;em&gt;nginx&lt;/em&gt; + &lt;em&gt;django&lt;/em&gt; 搭了一个服务器，提供了三个接口，都是返回 &lt;em&gt;JSON&lt;/em&gt; 格式的数据，三个接口具体如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://104.128.85.9:8001/api/gethomelist&lt;/code&gt;：获取首屏的数据列表；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://104.128.85.9:8001/api/getnextlist?timestamp=1434666598&lt;/code&gt;：下拉刷新的时候获取新增数据；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://104.128.85.9:8001/api/getstorydetail?id=4827840&lt;/code&gt;：获取某一天具体的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看得出来，我这三个接口都是为了给 app 端调用而设计提供的，所以下一步就是完成一个 app 把这些内容显示出来。&lt;/p&gt;
&lt;h2 id="app-端显示"&gt;app 端显示&lt;/h2&gt;
&lt;p&gt;app 端的工作就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过网络请求获取数据；&lt;/li&gt;
&lt;li&gt;解析 &lt;em&gt;JSON&lt;/em&gt; 数据然后根据一定的排版显示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，我也是只实现了一个极其简陋的效果，直接放图好了： &lt;img src="/static/images/201501/20150726-zhihu-app1.png" alt="app图" /&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/201501/20150726-zhihu-app2.png" alt="App效果图" /&gt;&lt;figcaption&gt;App效果图&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;上面两个图是历史列表和具体某一天内容的截图，下面再放一个应用图标的图： &lt;img src="/static/images/201501/20150726-zhihu-app3.png" /&gt; 上面有个图标乱入了，这个是我学习 &lt;em&gt;swift&lt;/em&gt; 的做的一个练习，具体可以看这篇：&lt;a href="http://www.karottc.com/blog/2015/07/25/swift-2048/"&gt;点我&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;整个过程大概就是这样。&lt;/p&gt;
&lt;h4 id="附件资料"&gt;附件资料&lt;/h4&gt;
&lt;p&gt;上面提到的服务和抓去知乎数据的代码在这里：&lt;a href="https://github.com/karottc/crawlzhihu"&gt;点我&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;app 源码在这里：&lt;a href="https://github.com/karottc/zhihudailyapp"&gt;点我&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;2015.07.26&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog2.karottc.com,2015-07-25:/posts/2015-07-25-swift-2048/</id>
    <title type="html">用 Swift 语言实现 2048游戏</title>
    <published>2015-07-25T12:26:17Z</published>
    <updated>2015-07-25T12:26:17Z</updated>
    <link rel="alternate" href="http://blog2.karottc.com/posts/2015-07-25-swift-2048/"/>
    <content type="html">&lt;p&gt;前段时间粗浅的学习一下 �Swift 这个语言，一个多月前的苹果开发者大会上，Swift已经更新到了 &lt;strong&gt;SWift2.0&lt;/strong&gt; 了，相比1.0有了不少的变化，有些适配的 Swift1.0的库，现在已经不能直接拿来用了，需要稍微改一下，比如sqlite3.0，这个在下文中会讲到。本文主要记录一下用 �Swift 实现2048游戏这个过程。&lt;/p&gt;
&lt;h3 id="基本功能的设计"&gt;基本功能的设计&lt;/h3&gt;
&lt;p&gt;游戏在启动之后应该包括两个界面，1. 游戏的主界面；2. 游戏的设置界面，比如可以设置过关的分数，设置维度来控制难易度。&lt;/p&gt;
&lt;p&gt;这种两个屏用 &lt;em&gt;UINavigationController&lt;/em&gt; 就可以搞定，主界面主要是绘图和分数的展示，设置界面主要是通过 &lt;em&gt;Label&lt;/em&gt; 和 &lt;em&gt;Button&lt;/em&gt; 来展示设置和响应用户设置。&lt;/p&gt;
&lt;h3 id="游戏界面的实现"&gt;游戏界面的实现&lt;/h3&gt;
&lt;p&gt;这是主要的工作，分成几步来说明：&lt;/p&gt;
&lt;h4 id="游戏模型"&gt;游戏模型&lt;/h4&gt;
&lt;p&gt;游戏模型通过一个 &lt;strong&gt;4 x 4&lt;/strong&gt; 的二维矩阵来实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要保存当前的各个位置的数字；&lt;/li&gt;
&lt;li&gt;控制新生成的数字；&lt;/li&gt;
&lt;li&gt;记录当前的最大值；&lt;/li&gt;
&lt;li&gt;判断当前是否每个位置上都有了数字；&lt;/li&gt;
&lt;li&gt;滑动时判断相邻两个是否可以合并，生成合并之后的数字。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个部分是整个游戏的核心，因为所有界面上展示的数据，都是来自于这个游戏模型的当前数值。&lt;/p&gt;
&lt;h4 id="初始界面"&gt;初始界面&lt;/h4&gt;
&lt;p&gt;第一步：绘制一个初始的界面，也就是 &lt;strong&gt;4 X 4&lt;/strong&gt; 的一个格子；&lt;/p&gt;
&lt;p&gt;第二步：初始数字的生成，用随机算法任意生成两个数字，同时控制数字 &lt;strong&gt;2&lt;/strong&gt; 出现的概率是90%，而数字 &lt;strong&gt;4&lt;/strong&gt; 出现的概率是 10%。&lt;/p&gt;
&lt;p&gt;第三步：合并相邻数字。&lt;/p&gt;
&lt;h4 id="游戏主体玩法"&gt;游戏主体玩法&lt;/h4&gt;
&lt;p&gt;第一步：添加新出现数字的动画；&lt;/p&gt;
&lt;p&gt;第二步：添加两个数字合并的动画；&lt;/p&gt;
&lt;p&gt;第三步：在主界面增加收拾识别，本游戏中只用支持上下左右四种手势即可；&lt;/p&gt;
&lt;p&gt;第四步：数字移动的算法，以向下滑动为例：当向下滑动的时候，从第一行依次向下移动一个位置（如果可以移动的话），同时移动了当前的位置的数字，上面位置的数字也有做相应的移动；&lt;/p&gt;
&lt;p&gt;第五步：相邻数字的合并，移动之后，判断相邻的数字，如果相等，就合并；&lt;/p&gt;
&lt;p&gt;第六步：合并之后，在剩余的位置上新生成一个数字，然后绘制图形。&lt;/p&gt;
&lt;h3 id="小细节适配"&gt;小细节适配&lt;/h3&gt;
&lt;p&gt;剩下要做的就是让游戏的设置生效，同时保存当前的游戏数据，在下一次启动的时候恢复。这里可以用sqlite保存，在github上有一个swift封装好的sqlite库，但是并能直接用到swift2.0上，所以，我做了小小的修改适配。&lt;/p&gt;
&lt;p&gt;最后，整个游戏的源码，在这里：&lt;a href="https://github.com/karottc/swift-practice/tree/master/game2048"&gt;点我&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;界面太丑了，所以我就不放游戏最后的截图了。等我什么时候心情好了再来美化一下界面。&lt;/p&gt;
&lt;p&gt;2015.07.25&lt;/p&gt;
</content>
  </entry>
</feed>

